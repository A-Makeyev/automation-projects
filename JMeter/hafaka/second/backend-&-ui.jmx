<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Settings" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay_min" elementType="Argument">
            <stringProp name="Argument.name">delay_min</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay_max" elementType="Argument">
            <stringProp name="Argument.name">delay_max</stringProp>
            <stringProp name="Argument.value">10000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="hour" elementType="Argument">
            <stringProp name="Argument.name">hour</stringProp>
            <stringProp name="Argument.value">3600</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="half_hour" elementType="Argument">
            <stringProp name="Argument.name">half_hour</stringProp>
            <stringProp name="Argument.value">1800</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="front-end-qa" elementType="Argument">
            <stringProp name="Argument.name">front-end-qa</stringProp>
            <stringProp name="Argument.value">hafaka-frontend-npcqa.menora.co.il</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="front-end-int" elementType="Argument">
            <stringProp name="Argument.name">front-end-int</stringProp>
            <stringProp name="Argument.value">hafaka-frontend-npcint.menora.co.il</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host-qa" elementType="Argument">
            <stringProp name="Argument.name">host-qa</stringProp>
            <stringProp name="Argument.value">hafaka-backend-npcqa.menora.co.il</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host-int" elementType="Argument">
            <stringProp name="Argument.name">host-int</stringProp>
            <stringProp name="Argument.value">hafaka-backend-npcint.menora.co.il</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="referer-qa" elementType="Argument">
            <stringProp name="Argument.name">referer-qa</stringProp>
            <stringProp name="Argument.value">hafaka-frontend-npcqa.menora.co.il/title</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="referer-int" elementType="Argument">
            <stringProp name="Argument.name">referer-int</stringProp>
            <stringProp name="Argument.value">hafaka-frontend-npcint.menora.co.il/title</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">server side: https://hafaka-backend-npcqa.menora.co.il/login  &lt;&gt;  client side: https://hafaka-frontend-npcqa.menora.co.il/login</stringProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${host}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <PreciseThroughputTimer guiclass="TestBeanGUI" testclass="PreciseThroughputTimer" testname="Precise Throughput Timer" enabled="false">
        <doubleProp>
          <name>allowedThroughputSurplus</name>
          <value>1.0</value>
          <savedValue>0.0</savedValue>
        </doubleProp>
        <intProp name="batchSize">1</intProp>
        <intProp name="batchThreadDelay">0</intProp>
        <longProp name="duration">3600</longProp>
        <intProp name="exactLimit">10000</intProp>
        <longProp name="randomSeed">0</longProp>
        <doubleProp>
          <name>throughput</name>
          <value>100.0</value>
          <savedValue>0.0</savedValue>
        </doubleProp>
        <intProp name="throughputPeriod">3600</intProp>
      </PreciseThroughputTimer>
      <hashTree/>
      <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
        <intProp name="calcMode">1</intProp>
        <doubleProp>
          <name>throughput</name>
          <value>9000.0</value>
          <savedValue>0.0</savedValue>
        </doubleProp>
      </ConstantThroughputTimer>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="false">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">1</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
      </ProxyControl>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 ~ UI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">240</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\JMETER\webdrivers\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="false">
          <stringProp name="TestPlan.comments">~ fix line 105 (no back button)</stringProp>
          <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 15)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent


//var attempt = 1
//var start = new Date().getTime()
//while (new Date().getTime() - start &lt; 5000) {
//	try {
		// Login Page
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
		WDS.browser.get(URL + &apos;/login&apos;)
		
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
		var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
		usernameField.sendKeys([&quot;k90fis1&quot;])
		
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
		var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
		passwordField.sendKeys([&quot;fis1&quot;])
		
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
		var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
		loginButton.click()
		
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Logged in successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
		WDS.sampleResult.sampleEnd()
		
		// Customer Policy Data
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;Customer Policy Data&apos;)
		
		function getPolicyData (policyNumber) {
			wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
			var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
			var select = new org.openqa.selenium.support.ui.Select(selectAction)
			select.selectByIndex(3)
			
			wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;policyId&quot;)))
			var policyField =  WDS.browser.findElement(pkg.By.id(&quot;policyId&quot;))
			policyField.sendKeys([policyNumber])
			// policyField.sendKeys([Keys.TAB])
			robota.keyPress(keyEvent.VK_TAB)
			robota.keyRelease(keyEvent.VK_TAB)

			java.lang.Thread.sleep(3000)
		
			// Get Data
			wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;נתוני חיתום&apos;) and not(disabled)]&quot;)))
			var dataButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;נתוני חיתום&apos;) and not(disabled)]&quot;))
			dataButton.click()
		}

		getPolicyData(&apos;043358972819700&apos;)
		
		java.lang.Thread.sleep(3000)
		
		
		// Click Next
		for (var x = 0; x &lt; 2; x++) {
			wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;)))
			var nextButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;))
			nextButton.click()
			java.lang.Thread.sleep(1500)
		}

		
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Customer Policy Data completed successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
		WDS.sampleResult.sampleEnd()
	
		// First Section Options
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;First Section Options&apos;)

		// Expand
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;הרחב סעיפים&apos;)]&quot;)))
		var expandButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;הרחב סעיפים&apos;)]&quot;))
		expandButton.click()
		java.lang.Thread.sleep(3000)

		// Shrink
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;כווץ סעיפים&apos;)]&quot;)))
		var shrinkButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;כווץ סעיפים&apos;)]&quot;))
		shrinkButton.click()
		java.lang.Thread.sleep(3000)

		// Finish
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;finishClausesBtn&quot;)))
		var finishButton =  WDS.browser.findElement(pkg.By.id(&quot;finishClausesBtn&quot;))
		finishButton.click()
		java.lang.Thread.sleep(3000)

		// Go Back
		WDS.browser.get(URL + &apos;/clauses&apos;)

//		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;חזור&apos; )]&quot;)))
//		var backButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;חזור&apos; )]&quot;))
//		backButton.click()

		java.lang.Thread.sleep(3000)


//		var handles = WDS.browser.getWindowHandles() 
//		var iterator = handles.iterator()
//		var currentHandle = WDS.browser.getWindowHandle()
//		while(iterator.hasNext()) {
//		    var handle = iterator.next() 
//		    if (handle != currentHandle) {
//		        WDS.browser.switchTo().window(handle)
//		        WDS.browser.close()
//		    }
//		}
//		WDS.browser.switchTo().defaultContent()
		

		// Exit
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;(//button[@class=&apos;btn btn-sm clause-btn clause-btn-exit&apos;])[1]&quot;)))
		var exitButton =  WDS.browser.findElement(pkg.By.xpath(&quot;(//button[@class=&apos;btn btn-sm clause-btn clause-btn-exit&apos;])[1]&quot;))
		exitButton.click()
		java.lang.Thread.sleep(3000)

		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; First Section Options completed successfully&apos;)
		WDS.sampleResult.sampleEnd()


		// Car Policy Data
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;Car Policy Data&apos;)
		
		getPolicyData(&apos;040303476319000&apos;)	

	
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Car Policy Data completed successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
		WDS.sampleResult.sampleEnd()


		// Assert Error Nessage
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;Assert Error Nessage&apos;)
		
		java.lang.Thread.sleep(1500) 
		
		// Pop Up Approve CheckBox
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;custom-control custom-checkbox&quot;]//label[@for=&quot;approvedDisclaimerControl&quot;]&apos;)))
		var popUpApproveCheckBox =  WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;custom-control custom-checkbox&quot;]//label[@for=&quot;approvedDisclaimerControl&quot;]&apos;))
		popUpApproveCheckBox.click()
		java.lang.Thread.sleep(3000)

		// Continue 
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;המשך&apos;) and not(@disabled)]&quot;)))
		var continueButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;המשך&apos;) and not(@disabled)]&quot;))
		continueButton.click()
		java.lang.Thread.sleep(3000)


		// Next
		for (var x = 0; x &lt; 2; x++) {
			wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;)))
			var nextButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;))
			nextButton.click()
			java.lang.Thread.sleep(1500)
		}	


		// Error Message
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[@id=&apos;modalCloseBtn&apos;]&quot;))) 
		var closeErrorMessage =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[@id=&apos;modalCloseBtn&apos;]&quot;))
		closeErrorMessage.click() //app-button[@id=&apos;modalCloseBtn&apos;]//button
		java.lang.Thread.sleep(3000)		

		// Approve CheckBox
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;confirmation&apos;]&quot;)))
		var approveCheckBox =  WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;confirmation&apos;]&quot;))
		approveCheckBox.click()
		java.lang.Thread.sleep(3000)

		// Next
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;)))
		var nextButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;הבא&apos;)]&quot;))
		nextButton.click()
		java.lang.Thread.sleep(1500)
		
		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Assert Error Nessage completed successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
		WDS.sampleResult.sampleEnd()


		// Second Section Options
		WDS.sampleResult.sampleStart()
		WDS.sampleResult.setResponseMessage(&apos;Second Section Options&apos;)

		// Expand
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;הרחב סעיפים&apos;)]&quot;)))
		var expandButton =  WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;הרחב סעיפים&apos;)]&quot;))
		expandButton.click()
		java.lang.Thread.sleep(3000)

		// Exit
		wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;(//button[@class=&apos;btn btn-sm clause-btn clause-btn-exit&apos;])[1]&quot;)))
		var exitButton =  WDS.browser.findElement(pkg.By.xpath(&quot;(//button[@class=&apos;btn btn-sm clause-btn clause-btn-exit&apos;])[1]&quot;))
		exitButton.click()
		java.lang.Thread.sleep(3000)

		WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Second Section Options completed successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
		WDS.sampleResult.sampleEnd()


		WDS.log.info(&apos;&gt;&gt;&gt; Test Passed&apos;)

//	} catch (err) {
//	    WDS.log.info(&apos;&gt;&gt;&gt; Test Failed&apos;)
//	    WDS.log.info(&apos;&gt;&gt;&gt; &apos; + err.message)
//	    WDS.log.info(&apos;Attempt # &apos; + attempt + &apos;, Element not found&apos;)
//         attempt++
//	    // var screenshot = WDS.browser.getScreenshotAs(pkg.OutputType.FILE)
//	    // screenshot.renameTo(java.io.File(&apos;failure-screen.png&apos;))
//	}
//}
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Scenario 1 ~ Selenium" enabled="true">
          <stringProp name="TestPlan.comments">startDate need to be set to next month</stringProp>
          <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 15)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}

// Login Page
var startTime = new Date().getTime()

WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
WDS.browser.get(URL + &apos;/login&apos;)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
usernameField.sendKeys([&quot;k90fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
passwordField.sendKeys([&quot;fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
loginButton.click()


var finishTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Login time: &apos; + (finishTime - startTime) + &apos; ms &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Policy Page
startTime = new Date().getTime()
WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
var select = new org.openqa.selenium.support.ui.Select(selectAction)
select.selectByIndex(1)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;search-branch-by-number&quot;)))
var selectBranch = WDS.browser.findElement(pkg.By.id(&quot;search-branch-by-number&quot;))
selectBranch.click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//ngb-highlight[contains(text(), &apos;33 - רכב פרטי ומסחרי&apos;)]&quot;)))
var privateCar = WDS.browser.findElement(pkg.By.xpath(&quot;//ngb-highlight[contains(text(), &apos;33 - רכב פרטי ומסחרי&apos;)]&quot;))
privateCar.click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;startDate&quot;)))
var startDate = WDS.browser.findElement(pkg.By.id(&quot;startDate&quot;))
startDate.sendKeys([&quot;01052020&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;paymentMethod&quot;)))
var paymentMethod = WDS.browser.findElement(pkg.By.id(&quot;paymentMethod&quot;))
var select = new org.openqa.selenium.support.ui.Select(paymentMethod)
select.selectByVisibleText(&quot; 5 - אשראית &quot;)

//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;search-agent-by-number&quot;)))
//var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;search-agent-by-number&quot;))
//searchAgent.sendKeys([&quot;591090&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;openAgentSearchBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;openAgentSearchBtn&quot;)).click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//label[contains(text(), &quot; איתור לפי מספר סוכן &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//label[contains(text(), &quot; איתור לפי מספר סוכן &quot;)]&apos;)).click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;inputAgentCode&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;inputAgentCode&quot;)).sendKeys([&quot;591090&quot;])

java.lang.Thread.sleep(1000)
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[text()=&quot;591090&quot;]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//td[text()=&quot;591090&quot;]&apos;)).click()
java.lang.Thread.sleep(1000)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()

java.lang.Thread.sleep(1000)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;approvedDisclaimerControl&apos;]&quot;)))
var approveButton = WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;approvedDisclaimerControl&apos;]&quot;))
approveButton.click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;approveUnderWritingDisclaimerBtnId&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;approveUnderWritingDisclaimerBtnId&quot;)).click()
java.lang.Thread.sleep(2500)

finishTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Policy page time: &apos; + (finishTime - startTime) + &apos; ms &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)

// Personal Page
startTime = new Date().getTime()
WDS.sampleResult.setResponseMessage(&apos;Personal Page&apos;)	

//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDInsTypeId&quot;)))
//var first_idType = WDS.browser.findElement(pkg.By.id(&quot;PDInsTypeId&quot;))
//var select = new org.openqa.selenium.support.ui.Select(first_idType)
//select.selectByVisibleText(&apos; 1 - תעודת זהות &apos;)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDInsId&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;PDInsId&quot;)).sendKeys([&quot;304804990&quot;])
java.lang.Thread.sleep(1000)

//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsTypeId&quot;)))
//var second_idType = WDS.browser.findElement(pkg.By.id(&quot;PDAddInsTypeId&quot;))
//var select = new org.openqa.selenium.support.ui.Select(second_idType)
//select.selectByVisibleText(&apos; 1 - תעודת זהות &apos;)

//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@id=&apos;PDAddInsId&apos;]&quot;)))
//WDS.browser.findElement(pkg.By.xpath(&quot;//input[@id=&apos;PDAddInsId&apos;]&quot;)).sendKeys([&quot;304804990&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsBirthDate&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;PDAddInsBirthDate&quot;)).sendKeys([&quot;01011989&quot;])

//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsDriver&apos;]&quot;)))
//WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsDriver&apos;]&quot;)).click() 

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsYoungestDriver&apos;]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsYoungestDriver&apos;]&quot;)).click() 

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsLicenseDate&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;PDAddInsLicenseDate&quot;)).sendKeys([&quot;01012009&quot;]) 

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclLicenseNo&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;PDVhclLicenseNo&quot;)).sendKeys([&quot;4552313&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclManufactureYear&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;PDVhclManufactureYear&quot;)).sendKeys([&quot;2012&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclVehicletype&quot;)))
var select = new org.openqa.selenium.support.ui.Select(WDS.browser.findElement(pkg.By.id(&quot;PDVhclVehicletype&quot;)))
select.selectByVisibleText(&apos; 1 - פרטי &apos;)
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;isInsConfirm&apos;]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;isInsConfirm&apos;]&quot;)).click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
java.lang.Thread.sleep(2500)

finishTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Personal page time: &apos; + (finishTime - startTime) + &apos; ms &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Personal Page - Continute
startTime = new Date().getTime()
WDS.sampleResult.setResponseMessage(&apos;Personal Page - Continute&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDInsLastName&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDInsLastName&quot;)).sendKeys([&quot;שלום&quot;])
java.lang.Thread.sleep(500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDInsFirstName&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDInsFirstName&quot;)).sendKeys([&quot;ישראל&quot;])
java.lang.Thread.sleep(500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsStreet&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDAddInsStreet&quot;)).sendKeys([&quot;אשששששש&quot;])
java.lang.Thread.sleep(500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsCity&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDAddInsCity&quot;)).sendKeys([&quot;קורונה&quot;])
java.lang.Thread.sleep(500)

pressTAB()
java.lang.Thread.sleep(500)
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; סגור &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; סגור &quot;)]&apos;)).click()
java.lang.Thread.sleep(500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsZipCode&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDAddInsZipCode&quot;)).sendKeys([&quot;55555&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsMobilePhoneNo&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;UDAddInsMobilePhoneNo&quot;)).sendKeys([&quot;0545555555&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//label[@for=&quot;confirmation&quot;]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//label[@for=&quot;confirmation&quot;]&apos;)).click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
java.lang.Thread.sleep(1500)

finishTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Personal page - Continute time: &apos; + (finishTime - startTime) + &apos; ms &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Sections Page
startTime = new Date().getTime()

for (var x = 0; x &lt; 5; x++) {
	pressENTER()
}

for (var x = 0; x &lt; 2; x++) {
	pressTAB()
}

// Choose car
pressF4()
var carTypeNumber = &apos;588330&apos;
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;description&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).sendKeys([&quot;מ&quot;])
java.lang.Thread.sleep(1000)
WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).clear()
java.lang.Thread.sleep(1000)
WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).sendKeys([&quot;מאזדה 3&quot;])


wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[text()=&quot;&apos; + carTypeNumber + &apos;&quot;]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//td[text()=&quot;&apos; + carTypeNumber + &apos;&quot;]&apos;)).click()

java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[50]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[50]&apos;)).click()

pressF4()
java.lang.Thread.sleep(2500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;מעל  30 שנה &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;מעל  30 שנה &quot;)]&apos;)).click()

pressTAB()
pressF8()
pressENTER()

// 01-00109
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[31]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[31]&apos;)).sendKeys([&apos;2&apos;])

for (var x = 0; x &lt; 2; x++) { pressTAB() }

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[33]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[33]&apos;)).sendKeys([&apos;2&apos;])

for (var x = 0; x &lt; 2; x++) { pressTAB() }

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[35]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[35]&apos;)).sendKeys([&apos;2&apos;])

pressTAB()
pressF8()

for (var x = 0; x &lt; 2; x++) { pressENTER() }

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//span[contains(text(), &quot;מספר מפעילי הרכב &quot;)]//..//..//input&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//span[contains(text(), &quot;מספר מפעילי הרכב &quot;)]//..//..//input&apos;)).sendKeys([&apos;5&apos;])

pressTAB()
pressF8()
pressENTER()
pressTAB()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//span[contains(text(), &quot;הוא הנהג העיקרי &quot;)]//..//..//input&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//span[contains(text(), &quot;הוא הנהג העיקרי &quot;)]//..//..//input&apos;)).sendKeys([&apos;1&apos;])

pressTAB()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//span[contains(text(), &quot;מצב משפחתי : &quot;)]//..//..//input)[1]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//span[contains(text(), &quot;מצב משפחתי : &quot;)]//..//..//input)[1]&apos;)).sendKeys([&apos;1&apos;])

pressTAB()
pressF8()


WDS.sampleResult.sampleEnd()
finishTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sections page time: &apos; + (finishTime - startTime) + &apos; ms &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 ~ UI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">240</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\JMETER\webdrivers\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Scenario 2 ~ Selenium" enabled="true">
          <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 15)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}


// Login Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
WDS.browser.get(URL + &apos;/login&apos;)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
usernameField.sendKeys([&quot;k90fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
passwordField.sendKeys([&quot;fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
loginButton.click()

WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Logged in successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Policy Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
var select = new org.openqa.selenium.support.ui.Select(selectAction)
select.selectByIndex(3)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;policyId&quot;)))
var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;policyId&quot;))
searchAgent.sendKeys([&quot;032200652119500&quot;])

var x = 0;
while(x &lt; 2) {
	pressTAB()
	x++
}

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
java.lang.Thread.sleep(1500)

WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Policy Page passed &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Sections Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Sections Page&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;collapseAllClausesBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;collapseAllClausesBtn&quot;)).click()
java.lang.Thread.sleep(2500)

pressDOWN()

pressENTER()

pressTAB()

pressF4()


// 1-00085
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;תכולה ומבנה &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;תכולה ומבנה &quot;)]&apos;)).click()
java.lang.Thread.sleep(1500)

var y = 0;
while(y &lt; 2) {
	pressENTER()
	y++
}

// 1-00090
// building
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).sendKeys([&quot;950000&quot;])
java.lang.Thread.sleep(1500)

// Photo volti
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;כן&quot;])
java.lang.Thread.sleep(1500)

// lang value
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).sendKeys([&quot;כן&quot;])
java.lang.Thread.sleep(1500)

pressTAB()

pressF8()

pressENTER()

// 1-00200
// volume
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).sendKeys([&quot;250000&quot;])
java.lang.Thread.sleep(1500)

// jewlery
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).sendKeys([&quot;5000&quot;])
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;5000&quot;])
java.lang.Thread.sleep(1500)

// free text
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;1&quot;])
java.lang.Thread.sleep(1500)


pressTAB()

pressF8()

pressENTER()


// 2-00220 
// S.B
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)))
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)).click()
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)).sendKeys([&quot;950000&quot;])
java.lang.Thread.sleep(1500)

pressENTER()

pressF8()


// 2-00291
var z = 0;
while(z &lt; 2) {
	pressENTER()
	z++
}

// 2-00296
pressDOWN()

pressENTER()

//textarea[@class=&quot;freeTextArea ng-pristine ng-valid ng-touched&quot;]
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//textarea&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//textarea&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;//textarea&apos;)).sendKeys([&quot;שלום לכולם בדיקת הוספת מלל&quot;])
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; אשר &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; אשר &quot;)]&apos;)).click()

pressF8()

pressDOWN()

pressENTER()

pressENTER()


// S.B
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)))
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)).click()
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)).sendKeys([&quot;200000&quot;])
java.lang.Thread.sleep(1500)

pressENTER()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;finishClausesBtn&apos;)))
WDS.browser.findElement(pkg.By.id(&apos;finishClausesBtn&apos;)).click()

WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sections Page passed &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)

//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; DEBUG &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
//java.lang.Thread.sleep(999999)

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 3 ~ UI" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">240</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">true</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\JMETER\webdrivers\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Scenario 3 ~ Selenium" enabled="true">
          <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 15)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(1500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(1500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(1500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(1500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(1500)
}

// Login Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
WDS.browser.get(URL + &apos;/login&apos;)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
usernameField.sendKeys([&quot;k90fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
passwordField.sendKeys([&quot;fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))

loginButton.click()

WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Logged in successfully &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Policy Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
var select = new org.openqa.selenium.support.ui.Select(selectAction)
select.selectByIndex(3)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;policyId&quot;)))
var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;policyId&quot;))
searchAgent.sendKeys([&quot;040800354119700&quot;])

for (var x = 0; x &lt; 2; x++) {
	pressTAB()
}

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;startDate&quot;)))
var startDate = WDS.browser.findElement(pkg.By.id(&quot;startDate&quot;))
startDate.sendKeys([&quot;01052020&quot;])

pressTAB()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
java.lang.Thread.sleep(1500)

WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Policy Page passed &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)


// Sections Page
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Sections Page&apos;)	

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;collapseAllClausesBtn&quot;)))
WDS.browser.findElement(pkg.By.id(&quot;collapseAllClausesBtn&quot;)).click()
java.lang.Thread.sleep(2500)


for (var x = 0; x &lt; 10; x++) {
	pressDOWN()
}

var open_0100100 = &apos;//span[contains(text(), &quot; 01-00100 / &quot;)]//..//..//img[@id=&quot;dropdownClauses&quot;]&apos;
var enter_0100100 = &apos;(//button[contains(text(), &quot; כניסה לסעיף&quot;)])[11]&apos;

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(open_0100100)))
WDS.browser.findElement(pkg.By.xpath(open_0100100)).click()
java.lang.Thread.sleep(1500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(enter_0100100)))
WDS.browser.findElement(pkg.By.xpath(enter_0100100)).click()
java.lang.Thread.sleep(1500)

// employers
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)).sendKeys([&apos;1&apos;])

// goods at work
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)).sendKeys([&apos;1&apos;])

// injuries
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)).sendKeys([&apos;1&apos;])

pressTAB()
pressF8()
pressENTER()

// 02-05001
pressTAB()
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[1]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[1]&apos;)).sendKeys([&quot;211789&quot;])

for (var x = 0; x &lt; 3; x++) {
	pressENTER()
}

// workers
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;5&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)).sendKeys([&quot;5&quot;])

pressTAB()
pressF8()
pressENTER()

// description
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)).sendKeys([&quot;אין תאור&quot;])

// number of cars
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).sendKeys([&quot;1&quot;])

// policy price
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;50000&quot;])

// S.B
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)))
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)).click()
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)).sendKeys([&quot;50000&quot;])

pressF8()
pressENTER()
pressENTER()

// 05-02200
// car number
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;123456&quot;])

// car brand
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).sendKeys([&quot;למבורגיני&quot;])

pressENTER()
pressDOWN()
pressENTER()
pressENTER()

// 06-00100
// name
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)).sendKeys([&quot;שלום&quot;])

// car brand
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)).click()
WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)).sendKeys([&quot;01011950&quot;])

pressTAB()
pressF4()

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;(בעל חנות )כולל מכירה&quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;(בעל חנות )כולל מכירה&quot;)]&apos;)).click()

pressTAB()

// S.B
wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)))
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)).click()
WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)).sendKeys([&quot;250000&quot;])

pressTAB()
pressENTER()
pressENTER()
pressF8()


WDS.sampleResult.sampleEnd()
WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Sections Page passed &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)

//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; DEBUG &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
//java.lang.Thread.sleep(999999)


</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="SELENIUM" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${hour}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">https://hafaka-frontend-npcqa.menora.co.il/login</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">true</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:\JMETER\webdrivers\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">true</boolProp>
          <boolProp name="ChromeDriverConfig.incognito_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.no_sandbox_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="login - logout" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login " enabled="true">
            <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent


// Login Page
var startTime = new Date().getTime()
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
WDS.browser.get(URL + &apos;/login&apos;)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
usernameField.sendKeys([&quot;k90fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
passwordField.sendKeys([&quot;fis1&quot;])

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))

loginButton.click()


WDS.sampleResult.sampleEnd()
var endTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt; Login time: &apos; + (endTime - startTime) + &apos; ms&apos;)
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Logout" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

// Logout
var startTime = new Date().getTime()
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Logout&apos;)


java.lang.Thread.sleep(5000)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)).click()

java.lang.Thread.sleep(2500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)).click()

java.lang.Thread.sleep(2500)

wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)))
WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)).click()


WDS.sampleResult.sampleEnd()
var endTime = new Date().getTime()
WDS.log.info(&apos;&gt;&gt;&gt; Logout time: &apos; + (endTime - startTime) + &apos; ms&apos;)

java.lang.Thread.sleep(5000)
</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scenario 1 ~ UI" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="01. Login  ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

// Start sample
var startTime = new Date().getTime()
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)

try {
	// Login Page
	WDS.browser.get(URL + &apos;/login&apos;)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
	var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
	usernameField.sendKeys([&quot;k90fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
	var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
	passwordField.sendKeys([&quot;fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
	var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
	
	loginButton.click()

	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Login time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-login-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} 

</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="02. Policy Page  ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}

// Policy Page
startTime = new Date().getTime()
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	

try {
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
	var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
	var select = new org.openqa.selenium.support.ui.Select(selectAction)
	select.selectByIndex(1)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;search-branch-by-number&quot;)))
	var selectBranch = WDS.browser.findElement(pkg.By.id(&quot;search-branch-by-number&quot;))
	selectBranch.click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//ngb-highlight[contains(text(), &apos;33 - רכב פרטי ומסחרי&apos;)]&quot;)))
	var privateCar = WDS.browser.findElement(pkg.By.xpath(&quot;//ngb-highlight[contains(text(), &apos;33 - רכב פרטי ומסחרי&apos;)]&quot;))
	privateCar.click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;startDate&quot;)))
	var startDate = WDS.browser.findElement(pkg.By.id(&quot;startDate&quot;))
	startDate.sendKeys([&quot;01052020&quot;])
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;paymentMethod&quot;)))
	var paymentMethod = WDS.browser.findElement(pkg.By.id(&quot;paymentMethod&quot;))
	var select = new org.openqa.selenium.support.ui.Select(paymentMethod)
	select.selectByVisibleText(&quot; 5 - אשראית &quot;)
	
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;search-agent-by-number&quot;)))
	//var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;search-agent-by-number&quot;))
	//searchAgent.sendKeys([&quot;591090&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;openAgentSearchBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;openAgentSearchBtn&quot;)).click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//label[contains(text(), &quot; איתור לפי מספר סוכן &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//label[contains(text(), &quot; איתור לפי מספר סוכן &quot;)]&apos;)).click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;inputAgentCode&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;inputAgentCode&quot;)).sendKeys([&quot;591090&quot;])
	
	java.lang.Thread.sleep(1000)
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[text()=&quot;591090&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//td[text()=&quot;591090&quot;]&apos;)).click()
	java.lang.Thread.sleep(1000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()
	
	java.lang.Thread.sleep(1000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;approvedDisclaimerControl&apos;]&quot;)))
	var approveButton = WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;approvedDisclaimerControl&apos;]&quot;))
	approveButton.click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;approveUnderWritingDisclaimerBtnId&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;approveUnderWritingDisclaimerBtnId&quot;)).click()
	java.lang.Thread.sleep(2500)
	
	finishTime = new Date().getTime()
	WDS.sampleResult.sampleEnd()
	WDS.log.info(&apos;&gt;&gt;&gt; Policy page time: &apos; + (finishTime - startTime) + &apos; ms&apos;)
	
} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-policy-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="03. Personal Page  ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}

try {
	// Personal Page
	startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Personal Page&apos;)	
	
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDInsTypeId&quot;)))
	//var first_idType = WDS.browser.findElement(pkg.By.id(&quot;PDInsTypeId&quot;))
	//var select = new org.openqa.selenium.support.ui.Select(first_idType)
	//select.selectByVisibleText(&apos; 1 - תעודת זהות &apos;)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDInsId&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;PDInsId&quot;)).clear()
	WDS.browser.findElement(pkg.By.id(&quot;PDInsId&quot;)).sendKeys([&quot;304804990&quot;])
	java.lang.Thread.sleep(1000)
	
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsTypeId&quot;)))
	//var second_idType = WDS.browser.findElement(pkg.By.id(&quot;PDAddInsTypeId&quot;))
	//var select = new org.openqa.selenium.support.ui.Select(second_idType)
	//select.selectByVisibleText(&apos; 1 - תעודת זהות &apos;)
	
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@id=&apos;PDAddInsId&apos;]&quot;)))
	//WDS.browser.findElement(pkg.By.xpath(&quot;//input[@id=&apos;PDAddInsId&apos;]&quot;)).sendKeys([&quot;304804990&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsBirthDate&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;PDAddInsBirthDate&quot;)).clear()
	WDS.browser.findElement(pkg.By.id(&quot;PDAddInsBirthDate&quot;)).sendKeys([&quot;01011989&quot;])
	
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsDriver&apos;]&quot;)))
	//WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsDriver&apos;]&quot;)).click() 
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsYoungestDriver&apos;]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;PDAddInsInsuredIsYoungestDriver&apos;]&quot;)).click() 
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDAddInsLicenseDate&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;PDAddInsLicenseDate&quot;)).clear()
	WDS.browser.findElement(pkg.By.id(&quot;PDAddInsLicenseDate&quot;)).sendKeys([&quot;01012009&quot;]) 
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclLicenseNo&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;PDVhclLicenseNo&quot;)).sendKeys([&quot;4552313&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclManufactureYear&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;PDVhclManufactureYear&quot;)).sendKeys([&quot;2012&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;PDVhclVehicletype&quot;)))
	var select = new org.openqa.selenium.support.ui.Select(WDS.browser.findElement(pkg.By.id(&quot;PDVhclVehicletype&quot;)))
	select.selectByVisibleText(&apos; 1 - פרטי &apos;)
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//label[@for=&apos;isInsConfirm&apos;]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//label[@for=&apos;isInsConfirm&apos;]&quot;)).click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
	java.lang.Thread.sleep(2500)
	
	finishTime = new Date().getTime()
	WDS.sampleResult.sampleEnd()
	WDS.log.info(&apos;&gt;&gt;&gt; Personal page time: &apos; + (finishTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-personal-page-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="04. Personal Page - continue  ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}

try {
	// Personal Page - Continute
	startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Personal Page - Continute&apos;)	
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDInsLastName&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDInsLastName&quot;)).sendKeys([&quot;שלום&quot;])
	java.lang.Thread.sleep(500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDInsFirstName&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDInsFirstName&quot;)).sendKeys([&quot;ישראל&quot;])
	java.lang.Thread.sleep(500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsStreet&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDAddInsStreet&quot;)).sendKeys([&quot;אשששששש&quot;])
	java.lang.Thread.sleep(500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsCity&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDAddInsCity&quot;)).sendKeys([&quot;קורונה&quot;])
	java.lang.Thread.sleep(500)
	
	pressTAB()
	java.lang.Thread.sleep(500)
	//wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; סגור &quot;)]&apos;)))
	//WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; סגור &quot;)]&apos;)).click()
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;modalCloseBtn&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;modalCloseBtn&quot;]&apos;)).click()
	java.lang.Thread.sleep(500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsZipCode&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDAddInsZipCode&quot;)).sendKeys([&quot;55555&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;UDAddInsMobilePhoneNo&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;UDAddInsMobilePhoneNo&quot;)).sendKeys([&quot;0545555555&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//label[@for=&quot;confirmation&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//label[@for=&quot;confirmation&quot;]&apos;)).click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
	java.lang.Thread.sleep(1500)
	
	finishTime = new Date().getTime()
	WDS.sampleResult.sampleEnd()
	WDS.log.info(&apos;&gt;&gt;&gt; Personal page - Continute time: &apos; + (finishTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-personal-page-continue&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="05. Sections Page ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}

try {
	// Sections Page
	startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	
	for (var x = 0; x &lt; 5; x++) {
		pressENTER()
	}
	
	for (var x = 0; x &lt; 2; x++) {
		pressTAB()
	}
	
	// Choose car
	pressF4()
	var carTypeNumber = &apos;588330&apos;
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;description&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).sendKeys([&quot;מ&quot;])
	java.lang.Thread.sleep(1000)
	WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).clear()
	java.lang.Thread.sleep(1000)
	WDS.browser.findElement(pkg.By.id(&quot;description&quot;)).sendKeys([&quot;מאזדה 3&quot;])
	
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[text()=&quot;&apos; + carTypeNumber + &apos;&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//td[text()=&quot;&apos; + carTypeNumber + &apos;&quot;]&apos;)).click()
	
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[50]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[50]&apos;)).click()
	
	pressF4()
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;מעל  30 שנה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;מעל  30 שנה &quot;)]&apos;)).click()
	
	pressTAB()
	pressF8()
	pressENTER()
	
	// 01-00109
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[31]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[31]&apos;)).sendKeys([&apos;2&apos;])
	
	for (var x = 0; x &lt; 2; x++) { pressTAB() }
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[33]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[33]&apos;)).sendKeys([&apos;2&apos;])
	
	for (var x = 0; x &lt; 2; x++) { pressTAB() }
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[35]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[35]&apos;)).sendKeys([&apos;2&apos;])
	
	pressTAB()
	pressF8()
	
	for (var x = 0; x &lt; 2; x++) { pressENTER() }
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//span[contains(text(), &quot;מספר מפעילי הרכב &quot;)]//..//..//input&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//span[contains(text(), &quot;מספר מפעילי הרכב &quot;)]//..//..//input&apos;)).sendKeys([&apos;5&apos;])
	
	pressTAB()
	pressF8()
	pressENTER()
	pressTAB()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//span[contains(text(), &quot;הוא הנהג העיקרי &quot;)]//..//..//input)[1]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//span[contains(text(), &quot;הוא הנהג העיקרי &quot;)]//..//..//input)[1]&apos;)).sendKeys([&apos;1&apos;])
	
	pressTAB()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//span[contains(text(), &quot;מצב משפחתי : &quot;)]//..//..//input)[1]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//span[contains(text(), &quot;מצב משפחתי : &quot;)]//..//..//input)[1]&apos;)).sendKeys([&apos;1&apos;])
	
	pressTAB()
	pressF8()
	
	
	WDS.sampleResult.sampleEnd()
	finishTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Sections page time: &apos; + (finishTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-sections-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} 

</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="06. Logout ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Logout
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Logout&apos;)
	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)).click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Logout time: &apos; + (endTime - startTime) + &apos; ms&apos;)
	
	java.lang.Thread.sleep(5000)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-logout-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scenario 2 ~ UI" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="01. Login ~ 2" enabled="true">
            <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Login Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
	WDS.browser.get(URL + &apos;/login&apos;)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
	var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
	usernameField.sendKeys([&quot;k90fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
	var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
	passwordField.sendKeys([&quot;fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
	var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
	
	loginButton.click()
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Login time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen2-login-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="02. Policy Page ~ 2" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

try {
	// Policy Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
	var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
	var select = new org.openqa.selenium.support.ui.Select(selectAction)
	select.selectByIndex(3)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;policyId&quot;)))
	var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;policyId&quot;))
	searchAgent.sendKeys([&quot;032200652119500&quot;])
	
	java.lang.Thread.sleep(5000)
	
	var x = 0;
	while(x &lt; 2) {
		pressTAB()
		x++
	}
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
	java.lang.Thread.sleep(1500)
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Policy time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen2-policy-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="03. Sections Page ~ 2" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(2500)
}

function pressENTER() {
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(2500)
}

function pressDOWN() {
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(2500)
}

function pressF4() {
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(2500)
}

function pressF8() {
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(2500)
}


try {
	// Sections Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Sections Page&apos;)	
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;collapseAllClausesBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;collapseAllClausesBtn&quot;)).click()
	java.lang.Thread.sleep(2500)
	
	pressDOWN()
	pressENTER()
	pressTAB()
	pressF4()
	
	
	// 1-00085
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;תכולה ומבנה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;תכולה ומבנה &quot;)]&apos;)).click()
	java.lang.Thread.sleep(1500)
	
	var y = 0;
	while(y &lt; 2) {
		pressENTER()
		y++
	}
	
	// 1-00090
	// building
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).sendKeys([&quot;950000&quot;])
	java.lang.Thread.sleep(1500)
	
	// Photo volti
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;כן&quot;])
	java.lang.Thread.sleep(1500)
	
	// lang value
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).sendKeys([&quot;כן&quot;])
	java.lang.Thread.sleep(1500)
	
	pressTAB()
	pressF8()
	pressENTER()
	
	// 1-00200
	// volume
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[11]&apos;)).sendKeys([&quot;250000&quot;])
	java.lang.Thread.sleep(1500)
	
	// jewlery
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).sendKeys([&quot;5000&quot;])
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;5000&quot;])
	java.lang.Thread.sleep(1500)
	
	// free text
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;1&quot;])
	java.lang.Thread.sleep(1500)
	
	
	pressTAB()
	pressF8()
	pressENTER()
	
	
	// 2-00220 
	// S.B
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)))
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)).click()
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2002200000&apos;)).sendKeys([&quot;950000&quot;])
	java.lang.Thread.sleep(1500)
	
	pressENTER()
	pressF8()
	
	
	// 2-00291
	var z = 0;
	while(z &lt; 2) {
		pressENTER()
		z++
	}
	
	// 2-00296
	pressDOWN()
	pressENTER()
	
	//textarea[@class=&quot;freeTextArea ng-pristine ng-valid ng-touched&quot;]
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//textarea&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//textarea&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;//textarea&apos;)).sendKeys([&quot;שלום לכולם בדיקת הוספת מלל&quot;])
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; אשר &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; אשר &quot;)]&apos;)).click()
	
	pressF8()
	pressDOWN()
	pressENTER()
	pressENTER()
	
	
	// S.B
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)))
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)).click()
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum2003100000&apos;)).sendKeys([&quot;200000&quot;])
	java.lang.Thread.sleep(1500)
	
	pressENTER()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;finishClausesBtn&apos;)))
	WDS.browser.findElement(pkg.By.id(&apos;finishClausesBtn&apos;)).click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Sections time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen2-sections-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="04. Logout ~ 2" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Logout
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Logout&apos;)
	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)).click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Logout time: &apos; + (endTime - startTime) + &apos; ms&apos;)
	
	java.lang.Thread.sleep(5000)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen2-logout-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scenario 3 ~ UI" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="01. Login ~ 3" enabled="true">
            <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Login Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)
	WDS.browser.get(URL + &apos;/login&apos;)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
	var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
	usernameField.sendKeys([&quot;k90fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
	var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
	passwordField.sendKeys([&quot;fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
	var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
	loginButton.click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Login time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen3-login-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="02. Policy Page ~ 3" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(1500)
}


try {
	// Policy Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Policy Page&apos;)	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;action&quot;)))
	var selectAction = WDS.browser.findElement(pkg.By.id(&quot;action&quot;))
	var select = new org.openqa.selenium.support.ui.Select(selectAction)
	select.selectByIndex(3)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;policyId&quot;)))
	var searchAgent = WDS.browser.findElement(pkg.By.id(&quot;policyId&quot;))
	searchAgent.sendKeys([&quot;040800354119700&quot;])
	
	java.lang.Thread.sleep(5000)
	
	for (var x = 0; x &lt; 2; x++) {
		pressTAB()
	}
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;startDate&quot;)))
	var startDate = WDS.browser.findElement(pkg.By.id(&quot;startDate&quot;))
	startDate.clear()
	startDate.sendKeys([&quot;01052020&quot;])
	
	pressTAB()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;underwritingBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;underwritingBtn&quot;)).click()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)))
	WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos; הבא &apos;)]&quot;)).click()
	java.lang.Thread.sleep(1500)
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Policy time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen3-policy-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="03. Sections Page ~ 3" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

function pressTAB() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_TAB)
	robota.keyRelease(keyEvent.VK_TAB)
	java.lang.Thread.sleep(1500)
}

function pressENTER() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_ENTER)
	robota.keyRelease(keyEvent.VK_ENTER)
	java.lang.Thread.sleep(1500)
}

function pressDOWN() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_DOWN)
	robota.keyRelease(keyEvent.VK_DOWN)
	java.lang.Thread.sleep(1500)
}

function pressF4() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_F4)
	robota.keyRelease(keyEvent.VK_F4)
	java.lang.Thread.sleep(1500)
}

function pressF8() {
	java.lang.Thread.sleep(1500)
	robota.keyPress(keyEvent.VK_F8)
	robota.keyRelease(keyEvent.VK_F8)
	java.lang.Thread.sleep(1500)
}


try {
	// Sections Page
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Sections Page&apos;)	
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;collapseAllClausesBtn&quot;)))
	WDS.browser.findElement(pkg.By.id(&quot;collapseAllClausesBtn&quot;)).click()
	java.lang.Thread.sleep(2500)
	
	
	for (var x = 0; x &lt; 10; x++) {
		pressDOWN()
	}
	
	var open_0100100 = &apos;//span[contains(text(), &quot; 01-00100 / &quot;)]//..//..//img[@id=&quot;dropdownClauses&quot;]&apos;
	var enter_0100100 = &apos;(//button[contains(text(), &quot; כניסה לסעיף&quot;)])[11]&apos;
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(open_0100100)))
	WDS.browser.findElement(pkg.By.xpath(open_0100100)).click()
	java.lang.Thread.sleep(1500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(enter_0100100)))
	WDS.browser.findElement(pkg.By.xpath(enter_0100100)).click()
	java.lang.Thread.sleep(1500)
	
	// employers
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[6]&apos;)).sendKeys([&apos;1&apos;])
	
	// goods at work
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[10]&apos;)).sendKeys([&apos;1&apos;])
	
	// injuries
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[12]&apos;)).sendKeys([&apos;1&apos;])
	
	pressTAB()
	pressF8()
	pressENTER()
	
	// 02-05001
	pressTAB()
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[1]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[1]&apos;)).sendKeys([&quot;211789&quot;])
	
	for (var x = 0; x &lt; 3; x++) {
		pressENTER()
	}
	
	// workers
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;5&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[16]&apos;)).sendKeys([&quot;5&quot;])
	
	pressTAB()
	pressF8()
	pressENTER()
	
	// description
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[13]&apos;)).sendKeys([&quot;אין תאור&quot;])
	
	// number of cars
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[14]&apos;)).sendKeys([&quot;1&quot;])
	
	// policy price
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[15]&apos;)).sendKeys([&quot;50000&quot;])
	
	// S.B
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)))
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)).click()
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum5002020000&apos;)).sendKeys([&quot;50000&quot;])
	
	pressF8()
	pressENTER()
	pressENTER()
	
	// 05-02200
	// car number
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[24]&apos;)).sendKeys([&quot;123456&quot;])
	
	// car brand
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[25]&apos;)).sendKeys([&quot;למבורגיני&quot;])
	
	pressENTER()
	pressDOWN()
	pressENTER()
	pressENTER()
	
	// 06-00100
	// name
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[27]&apos;)).sendKeys([&quot;שלום&quot;])
	
	// car brand
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)).click()
	WDS.browser.findElement(pkg.By.xpath(&apos;(//input[@name=&quot;lname&quot;])[29]&apos;)).sendKeys([&quot;01011950&quot;])
	
	pressTAB()
	pressF4()
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//td[contains(text(), &quot;(בעל חנות )כולל מכירה&quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//td[contains(text(), &quot;(בעל חנות )כולל מכירה&quot;)]&apos;)).click()
	
	pressTAB()
	
	// S.B
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)))
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)).click()
	WDS.browser.findElement(pkg.By.id(&apos;clauseInsuranceSum6001000000&apos;)).sendKeys([&quot;250000&quot;])
	
	pressTAB()
	pressENTER()
	pressENTER()
	pressF8()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Sections time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen3-sections-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} 

//WDS.log.info(&apos;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; DEBUG &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&apos;)
//java.lang.Thread.sleep(999999)</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="04. Logout ~ 3" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Logout
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Logout&apos;)
	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)).click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Logout time: &apos; + (endTime - startTime) + &apos; ms&apos;)
	
	java.lang.Thread.sleep(5000)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen3-logout-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Scenario 4 ~ UI" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="01. Login  ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">//Clear cache and cookies in case the script runs several iterations
//WDS.browser.getLocalStorage().clear();
//WDS.browser.manage().deleteAllCookies();

// WDS.browser.executeScript()

var URL = &apos;https://hafaka-frontend-npcqa.menora.co.il&apos;

var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

var robota = new java.awt.Robot()
var keyEvent = java.awt.event.KeyEvent

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

// Start sample
var startTime = new Date().getTime()
WDS.sampleResult.sampleStart()
WDS.sampleResult.setResponseMessage(&apos;Login Page&apos;)

try {
	// Login Page
	WDS.browser.get(URL + &apos;/login&apos;)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-user&quot;)))
	var usernameField = WDS.browser.findElement(pkg.By.id(&quot;input-login-user&quot;))
	usernameField.sendKeys([&quot;k90fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.id(&quot;input-login-password&quot;)))
	var passwordField = WDS.browser.findElement(pkg.By.id(&quot;input-login-password&quot;))
	passwordField.sendKeys([&quot;fis1&quot;])
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;)))
	var loginButton = WDS.browser.findElement(pkg.By.xpath(&quot;//button[contains(text(), &apos;התחברות&apos;)]&quot;))
	
	loginButton.click()

	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Login time: &apos; + (endTime - startTime) + &apos; ms&apos;)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-login-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} 

</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="06. Logout ~ 1" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = JavaImporter(org.openqa.selenium.support.ui.ExpectedConditions)
var wait = new support_ui.WebDriverWait(WDS.browser, 60)

// Generate screenshot on error
var selenium = JavaImporter(org.openqa.selenium)

try {
	// Logout
	var startTime = new Date().getTime()
	WDS.sampleResult.sampleStart()
	WDS.sampleResult.setResponseMessage(&apos;Logout&apos;)
	
	
	java.lang.Thread.sleep(5000)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot;K90FIS1&quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(text(), &quot; יציאה &quot;)]&apos;)).click()
	
	java.lang.Thread.sleep(2500)
	
	wait.until(conditions.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)))
	WDS.browser.findElement(pkg.By.xpath(&apos;//button[@id=&quot;logoff&quot;]&apos;)).click()
	
	
	WDS.sampleResult.sampleEnd()
	var endTime = new Date().getTime()
	WDS.log.info(&apos;&gt;&gt;&gt; Logout time: &apos; + (endTime - startTime) + &apos; ms&apos;)
	
	java.lang.Thread.sleep(5000)

} catch (err) {
	//WDS.sampleResult.sampleEnd()
   	WDS.log.error(&apos;&gt;&gt;&gt; Login failed: &apos; + err.message)
   	
   	var ts = (new Date()).getTime()
   	var screenshot = WDS.browser.getScreenshotAs(selenium.OutputType.FILE)
   	var filePath = &apos;D:\\LoadTest\\Hafaka\\Results\\Screenshots\\scen1-logout-&apos; + ts + &apos;.png&apos;
   	screenshot.renameTo(new java.io.File(filePath))
	//FileUtils.copy(screenshot, new File(filePath))
	throw err;
} </stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------------" enabled="true"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="245 /api/private/keep-ble-alive" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/private/keep-ble-alive</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 1 - HTTP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">21</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${hour}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="01. Login (Execute Once)" enabled="true">
          <stringProp name="TestPlan.comments">k90fis1   ~    fis1</stringProp>
        </OnceOnlyController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01. Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01 /api/authentication/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;oauthFragment&quot;:&quot;ext_target=sys&amp;user=k90fis1&amp;passwd=ZmlzMQ==&quot;,&quot;mode&quot;:&quot;man&quot;,&quot;uniqueVisitId&quot;:&quot;v-clczrrecxuupsx42755i&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/authentication/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}/authentication?allowReturn=true&amp;mode=man</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02 /api/application-scm-info/get-all-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-scm-info/get-all-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03 /api/application-properties/get-environment" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-properties/get-environment</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02. Action" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.01 /api/title/action-code-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/action-code-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03. Branch" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.01 /api/title/get-branch-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-branch-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="04. Dates" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.01 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.02 /api/main-queries/get-details-from-t5200-anafim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-details-from-t5200-anafim</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.03 /api/main/set-code-peula-new" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/set-code-peula-new</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.04 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.05 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="05. Collection" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05.01 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="06. Agent" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.01 /api/agents/search-by-agent-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agent-number" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-number</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agents/search-by-agent-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.02 /api/agents/get-agent-details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ifRenewCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ifRenewCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agentNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agentNo</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyEndDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyEndDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agents/get-agent-details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.03 /api/main-queries/get-t-sochen-anaf" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agentNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agentNo</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-t-sochen-anaf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.04 /api/main-queries/get-permissions-from-tGroupsMembers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="groupId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">groupId</stringProp>
                  <stringProp name="Argument.value">13</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-permissions-from-tGroupsMembers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="07. Data" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.01 /api/main/set-code-peula-new" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/set-code-peula-new</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="08. Accept" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.01 /api/underwriting/get-personal-details-initial" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is-vehicle-branch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is-vehicle-branch</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">form-type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policy-no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policy-no</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branch-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branch-code</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/get-personal-details-initial</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.02 /api/main-queries/get-collective-by-parameters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="insured-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insured-id</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="vehicle-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vehicle-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-collective-by-parameters</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="09. Id" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.01 /api/main-queries/get-collective-by-parameters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="insured-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insured-id</stringProp>
                  <stringProp name="Argument.value">304804990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="vehicle-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vehicle-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-collective-by-parameters</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10. Car type" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.01 /api/main-queries/get-collective-by-parameters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">591090</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="insured-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insured-id</stringProp>
                  <stringProp name="Argument.value">304804990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="vehicle-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vehicle-type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-collective-by-parameters</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11. Car details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.01 /api/underwriting/create-under-writing-buffer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;createUnderWritingBuffer&quot;:{&quot;trTchilatPolisa&quot;:20200501,&quot;hfCarTyp&quot;:0,&quot;weight&quot;:0,&quot;engVolume&quot;:0,&quot;airBags&quot;:0,&quot;shilda&quot;:&quot;&quot;,&quot;homas&quot;:&quot;&quot;,&quot;policynum&quot;:0,&quot;anaf&quot;:33,&quot;mSochen&quot;:591090,&quot;mRishui&quot;:4552313,&quot;yearMake&quot;:2012,&quot;vehicleType&quot;:1,&quot;accessPrivilege&quot;:1,&quot;vhclChangedInd&quot;:1,&quot;chovaCollectiveId&quot;:0,&quot;kaskoCollectiveId&quot;:20200501,&quot;mevutachIdType&quot;:1,&quot;mMevutach&quot;:304804990,&quot;mevutachTrLeida&quot;:19890101,&quot;mevutachTrRishui&quot;:20090101,&quot;mevutachIsYoungDriver&quot;:1,&quot;mevutachIsDriver&quot;:1,&quot;mevutachChangedInd&quot;:1,&quot;youngDriverId&quot;:304804990,&quot;youngDriverIdType&quot;:1,&quot;youngDriverTrLeida&quot;:19890101,&quot;youngDriverTrRishui&quot;:20090101,&quot;youngDriverChangedInd&quot;:1,&quot;anafSecondaryCode&quot;:0,&quot;isIsoOperated&quot;:1,&quot;isoOperationMode&quot;:1,&quot;isoRenewIsNew&quot;:0,&quot;isoDocType&quot;:11,&quot;coverType&quot;:1,&quot;userName&quot;:&quot;K90FIS1&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/create-under-writing-buffer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12. Customer details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.01 /api/underwriting/update-memdb-with-underwriting-data" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;updateMemdbWithUnderWritingData&quot;:{&quot;abs&quot;:1,&quot;absFlag&quot;:1,&quot;airBags&quot;:10,&quot;airbags&quot;:9,&quot;blndSId&quot;:2,&quot;brkSstm&quot;:2,&quot;cShilda&quot;:&quot;1G1P85SC9C7201945&quot;,&quot;calculatedSeats&quot;:5,&quot;chovaCollectiveId&quot;:0,&quot;comName&quot;:&quot;CRUZ&quot;,&quot;dgmLevy&quot;:961415,&quot;driver&quot;:[{&quot;idNumber&quot;:304804990,&quot;idType&quot;:1,&quot;birthDate&quot;:19891111,&quot;birthDateSource&quot;:19890101,&quot;claimsNum&quot;:0,&quot;drvNum&quot;:0,&quot;firstName&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;gender&quot;:1,&quot;isYoungDrv&quot;:1,&quot;lastName&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;licenseDate&quot;:20080603,&quot;licenseDateSource&quot;:20090101,&quot;licenseValidityDate&quot;:0,&quot;mevutachIsDriver&quot;:1,&quot;susNum&quot;:0},{&quot;idNumber&quot;:304804990,&quot;idType&quot;:1,&quot;birthDate&quot;:19891111,&quot;birthDateSource&quot;:19890101,&quot;claimsNum&quot;:0,&quot;drvNum&quot;:1,&quot;firstName&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;gender&quot;:1,&quot;isYoungDrv&quot;:0,&quot;lastName&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;licenseDate&quot;:20080603,&quot;licenseDateSource&quot;:20090101,&quot;licenseValidityDate&quot;:0,&quot;mevutachIsDriver&quot;:0,&quot;susNum&quot;:0},{&quot;idNumber&quot;:0,&quot;idType&quot;:0,&quot;birthDate&quot;:0,&quot;birthDateSource&quot;:0,&quot;claimsNum&quot;:0,&quot;drvNum&quot;:0,&quot;firstName&quot;:&quot;&quot;,&quot;gender&quot;:0,&quot;isYoungDrv&quot;:0,&quot;lastName&quot;:&quot;&quot;,&quot;licenseDate&quot;:0,&quot;licenseDateSource&quot;:0,&quot;licenseValidityDate&quot;:0,&quot;mevutachIsDriver&quot;:0,&quot;susNum&quot;:0},{&quot;idNumber&quot;:0,&quot;idType&quot;:0,&quot;birthDate&quot;:0,&quot;birthDateSource&quot;:0,&quot;claimsNum&quot;:0,&quot;drvNum&quot;:0,&quot;firstName&quot;:&quot;&quot;,&quot;gender&quot;:0,&quot;isYoungDrv&quot;:0,&quot;lastName&quot;:&quot;&quot;,&quot;licenseDate&quot;:0,&quot;licenseDateSource&quot;:0,&quot;licenseValidityDate&quot;:0,&quot;mevutachIsDriver&quot;:0,&quot;susNum&quot;:0},{&quot;idNumber&quot;:0,&quot;idType&quot;:0,&quot;birthDate&quot;:0,&quot;birthDateSource&quot;:0,&quot;claimsNum&quot;:0,&quot;drvNum&quot;:0,&quot;firstName&quot;:&quot;&quot;,&quot;gender&quot;:0,&quot;isYoungDrv&quot;:0,&quot;lastName&quot;:&quot;&quot;,&quot;licenseDate&quot;:0,&quot;licenseDateSource&quot;:0,&quot;licenseValidityDate&quot;:0,&quot;mevutachIsDriver&quot;:0,&quot;susNum&quot;:0}],&quot;drvClaimsDataSource&quot;:1,&quot;drvDataSource&quot;:1,&quot;drvUnderwritingType&quot;:0,&quot;dstncIdnt&quot;:2,&quot;dstncMntr&quot;:2,&quot;dvtionCnt&quot;:2,&quot;engVolume&quot;:1364,&quot;fuelType&quot;:0,&quot;fwdLight&quot;:2,&quot;hagb1&quot;:&quot;&quot;,&quot;hagb2&quot;:&quot;&quot;,&quot;hagb3&quot;:&quot;&quot;,&quot;hagb4&quot;:&quot;&quot;,&quot;hfCarDes&quot;:&quot;×¤×¨×&#x98;×&#x99;&quot;,&quot;hfCarTyp&quot;:1,&quot;hitumFlag&quot;:0,&quot;homas&quot;:&quot;×&#x9c;×&#x90;&quot;,&quot;horsePwr&quot;:140,&quot;humanId&quot;:2,&quot;kaskoCollectiveId&quot;:20200501,&quot;lWeight&quot;:1426,&quot;make&quot;:961,&quot;makeDesc&quot;:&quot;×©×&#x91;×¨×&#x95;×&#x9c;×&#x98; ×&#x90;×¨×&#x94;\&quot;×&#x91;&quot;,&quot;mevutachClaimsDataSource&quot;:1,&quot;mevutachConfirmation&quot;:0,&quot;mevutachDataSource&quot;:1,&quot;mevutachUnderwritingType&quot;:0,&quot;mnfctrNm&quot;:&quot;×&#x91;\&quot;×&#x94;×¨×&#x90; ×&#x98;×&#x9c;×&#x95;×¨×&#x91;&quot;,&quot;mnfctrNo&quot;:961,&quot;modelNo&quot;:8,&quot;numOfRec5700&quot;:1,&quot;numOfRec5701&quot;:1,&quot;numOfRec5702&quot;:2,&quot;queryDate&quot;:20200421073003,&quot;queryId&quot;:&quot;000000017563109&quot;,&quot;queryStatus&quot;:0,&quot;rishuiYear&quot;:0,&quot;rmtGmr&quot;:&quot;TURBO LTZ&quot;,&quot;seats&quot;:5,&quot;sentToIso&quot;:1,&quot;shilda&quot;:118597201945,&quot;sibatBitul&quot;:&quot;&quot;,&quot;signIdnt&quot;:2,&quot;stbltyCnt&quot;:1,&quot;sugRchv&quot;:&quot;&quot;,&quot;tireSnsr&quot;:1,&quot;underwritingType&quot;:0,&quot;userConfirmation&quot;:1,&quot;vhclDataSource&quot;:1,&quot;vhclDesc&quot;:&quot;CRUZE&quot;,&quot;vhclType&quot;:1,&quot;vhclTypeDesc&quot;:&quot;×©×&#x91;×¨×&#x95;×&#x9c;×&#x98; ×&#x90;×¨×&#x94;\&quot;×&#x91;&quot;,&quot;vhclTypeSource&quot;:1,&quot;vhclUnderwritingType&quot;:0,&quot;volume&quot;:1364,&quot;weight&quot;:1426,&quot;yearMake&quot;:2012,&quot;yearMakeSource&quot;:0}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/update-memdb-with-underwriting-data</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/underwriting-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13. Update customer" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.01 /api/main/update-lakoach" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lakoach&quot;:{&quot;codePeula&quot;:1,&quot;mLakoach&quot;:304804990,&quot;shemLakoach&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;shemMishpacha&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;mikud&quot;:55555,&quot;ktovet&quot;:&quot;null&quot;,&quot;ishuv&quot;:null,&quot;shemAnglit&quot;:null,&quot;trLeida&quot;:19891111,&quot;soog&quot;:1,&quot;trRishui&quot;:20080603,&quot;msLakuahSochen&quot;:0,&quot;sex&quot;:1,&quot;tel&quot;:&quot;&quot;,&quot;cellTel&quot;:&quot;0545555555&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/update-lakoach</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/underwriting-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14. Actions" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.01 /api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0200&quot;:{&quot;trTchila&quot;:20200501,&quot;trTom&quot;:20210430,&quot;tkufatBit&quot;:365,&quot;mPolisa&quot;:0,&quot;codePeula&quot;:&quot;1&quot;,&quot;mAnaf&quot;:33,&quot;kaskoChova&quot;:1,&quot;mTashlumim&quot;:0,&quot;mSochen&quot;:591090,&quot;codeHazmada&quot;:1,&quot;chova&quot;:1,&quot;ofenGvia&quot;:&quot;5&quot;,&quot;ofenGviaDesc&quot;:&quot;×&#x90;×©×¨×&#x90;×&#x99;×ª&quot;,&quot;sugChiuv&quot;:0,&quot;sugPolisaBriut&quot;:null,&quot;mHeskemBriut&quot;:null,&quot;ifiunNosaf&quot;:null,&quot;nPolDira&quot;:&quot;&quot;,&quot;mMevutach&quot;:304804990,&quot;mRishui&quot;:&quot;4552313&quot;,&quot;shemMevutach&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;shemMishpacha&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;ktovet&quot;:&quot;×&#x90;×©×©×©×©×©×©&quot;,&quot;ishuv&quot;:&quot;×§×&#x95;×¨×&#x95;× ×&#x94;&quot;,&quot;mikud&quot;:&quot;55555&quot;,&quot;shilda&quot;:118597201945,&quot;tel&quot;:&quot;&quot;,&quot;cellTel&quot;:&quot;0545555555&quot;,&quot;szEMail&quot;:null,&quot;soog&quot;:1,&quot;sochenSochnut&quot;:1,&quot;goremKefel&quot;:1,&quot;shinuiHosafa&quot;:0,&quot;shinuiHachsara&quot;:0,&quot;codePeulaMasach&quot;:40},&quot;eltr0300ActionCode&quot;:3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15. Sections" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00050 0000081&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100050,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:7,&quot;mSeif&quot;:100050,&quot;mSeifSecondary&quot;:100050,&quot;mShurotHakrana&quot;:8,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00050 0000081&quot;,&quot;shemSeif&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×&#x9e;×&#x9c;×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;08&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00050 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000500000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00050&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000600000},{&quot;clause&quot;:1001000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00050 0000082&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100050,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:11,&quot;shemSade&quot;:&quot;×ª×&#x96;/×&#x97;.×¤ × ×&#x94;×&#x92; ×¨×&#x90;×©×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;304804990&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×¤×¨×&#x98;×&#x99; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×¨×&#x90;×©×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x9e;×©×¤×&#x97;×&#x94; ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:11,&quot;shemSade&quot;:&quot;×ª×&#x96; × ×&#x94;×&#x92; ×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x9e;×©×¤×&#x97;×&#x94; × ×&#x94;×&#x92; ×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:46,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×©×&#x9d; × ×&#x95;×¡×¤&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:8},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:7,&quot;mSeif&quot;:100050,&quot;mSeifSecondary&quot;:100060,&quot;mShurotHakrana&quot;:8,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00050 0000082&quot;,&quot;shemSeif&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×&#x9e;×&#x9c;×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;08&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00050 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000500000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00050&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:3,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000600000},{&quot;clause&quot;:1001000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00060 0000051&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100060,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100060,&quot;mSeifSecondary&quot;:100060,&quot;mShurotHakrana&quot;:5,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00060 0000051&quot;,&quot;shemSeif&quot;:&quot;×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;05&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00060 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000600000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00060&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1001000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.04 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00060 0000053&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100060,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×¡×&#x99;×&#x95;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¤×¨×&#x95;×¨×&#x98;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x97;\&quot;×¤ 2&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×&#x97;\&quot;×¤ 2&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x99;×&#x95;×&#x96;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x99;×¨×&#x99;×&#x93;×ª ×¢×¨×&#x9a; ×&#x95;×&#x90;×§×¡×¡&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª× ×&#x90;×&#x99; ×¡×&#x95;×&#x9b;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x99;×&#x9e;×&#x99;×&#x9d; ×&#x91;×¤×&#x95;×&#x9c;×&#x99;×¡×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;×¡×&#x92;×&#x9f;,2 ×¨×&#x90;×© ×¦×&#x95;×&#x95;×ª 1, ×¤×¨×&#x98; ×&#x9b;3&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×¤×§×&#x99;×&#x93;, ×§×&#x95;×&#x93; 9&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×&#x9e;× ×&#x95;×¨×&#x94; 0&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×&#x99;×¢×&#x95;×&#x93;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;×&#x99;×&#x9d;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×ª.×&#x96;. ×&#x99;×&#x97;×©×&#x91; ×&#x9b;×&#x9e;×&#x95; ×&#x97;×¤&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×&#x9b;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:31,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x99;×&#x95;×&#x96;×¨ ×¡×&#x95;×&#x9b;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×¤×§&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×©×&#x9e;×©×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:3,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x9c;×&#x99;×¤×&#x99;×&#x9d; ×&#x91;×©×&#x91;×&#x99;×&#x9c; ×¡×¢×&#x99;×£ 7018&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:42,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x97;×&#x99;×¨ ×&#x9e;×&#x99;×&#x95;×&#x97;×&#x93; ×&#x91;×&#x97;×&#x95;×&#x91;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9c;×&#x9c;×&#x90; ×§×&#x99;×&#x98;×&#x95;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9c;×&#x9c;×&#x90; ×¤×&#x95;×&#x9c;×&#x99;×¡×&#x94; ×¤×&#x9c;×&#x95;×¡&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9b;×¨×&#x98;×&#x99;×¡ ×&#x90;×©×¨×&#x90;×&#x99; ×&#x94;×&#x95;×¨×&#x90;×ª ×§×&#x91;×¢&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×&#x92;×&#x99;×&#x9c; ×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91; = 24&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91; ×&#x92;×&#x99;×&#x90;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:5},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100060,&quot;mSeifSecondary&quot;:100100,&quot;mShurotHakrana&quot;:5,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00060 0000053&quot;,&quot;shemSeif&quot;:&quot;×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;05&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00060 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000600000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00060&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:3,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1001000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.05 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000131&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100100,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:25,&quot;mSeif&quot;:100100,&quot;mSeifSecondary&quot;:100100,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000131&quot;,&quot;shemSeif&quot;:&quot;× ×ª×&#x95;× ×&#x99;×&#x9d; ×&#x9b;×&#x9c;×&#x9c;×&#x99;×&#x99;×&#x9d; -&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001000000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00100&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16. Car model" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17. Driver " enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18. Vetek" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">11</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000133&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100100,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:2,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×ª ×¡×&#x95;×&#x92; ×&#x94;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x94;×&#x9e;×&#x91;×&#x95;×§×©&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:13,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:4,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×ª ×¡×&#x95;×&#x92; ×&#x94;× ×&#x94;×&#x92; ×&#x94;×&#x9e;×ª×&#x90;×&#x99;×&#x9d;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:12,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; × ×&#x94;×&#x92;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:588330,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×&#x97;×ª ×&#x9e;×&#x94;×&#x90;×¤×©×¨×&#x95;×&#x99;×&#x95;×ª&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:34,&quot;shemSade&quot;:&quot;×&#x93;×&#x92;×&#x9d; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;588330&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x90;×ª ×©× ×ª ×&#x93;×&#x92;×&#x9d; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×©× ×ª ×&#x99;×¦×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;2012&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x90;×&#x99;×&#x9f; ×&#x9c;×&#x94;×§×&#x99;×© ×©×&#x93;×&#x94; ×&#x96;×&#x94;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×&#x93;×&#x92;×&#x9d;-×&#x9c;×&#x90; ×&#x9c;×&#x94;×&#x94;×§×©×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×&#x97;×ª ×&#x9e;×&#x94;×&#x90;×¤×©×¨×&#x95;×&#x99;×&#x95;×ª&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:20,&quot;shemSade&quot;:&quot;×&#x90;×¤×&#x99;×&#x95;×&#x9f; ×&#x94;×¤×&#x95;×&#x9c;×&#x99;×¡×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:16,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x9e;×©×&#x95;×ª ×&#x99;×&#x91;×&#x95;×&#x90; ×&#x90;×&#x99;×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;× ×&#x95;×¡×¢×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:16,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x91;×&#x97;×&#x91;×¨×&#x95;×ª ×&#x90;×&#x97;×¨×&#x95;×ª&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡&apos; ×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×©× ×&#x95;×ª ×&#x94;×&#x95;×&#x95;×ª×§&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:41,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f; ×&#x90;×&#x95; ×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x98;×&#x95;×&#x9e;×&#x90;×&#x98;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f; ×&#x90;×&#x95; ×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x96;×&#x92;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×&#x97;×&#x93; ×&#x9e;×&#x94;×¢×¨×&#x9b;×&#x99;×&#x9d;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:15,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×¨×&#x93;×&#x99;×&#x95;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x90;×ª ×¡×&#x9b;×&#x95;×&#x9d; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x94;×&#x9e;×&#x91;×&#x95;×§×© ×&#x9c;×¨×&#x93;×&#x99;×&#x95;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¢×¨×&#x9a; ×&#x94;×¨×&#x93;×&#x99;×&#x95;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x91;×&#x97;×¨ ×&#x90;×&#x97;×ª ×&#x9e;×&#x94;×&#x90;×¤×©×¨×&#x95;×&#x99;×&#x95;×ª&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:13,&quot;shemSade&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x92;×¨×&#x99;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f;/×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×©×&#x91;×¨ ×©×&#x9e;×©×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f;/×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;× ×&#x96;×§×&#x99; ×&#x92;×&#x95;×£ ×&#x9e;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×¨×§ ×&#x90;×&#x9d; ×&#x9e;×¢×&#x9c; ×&#x9c;×¡×&#x9b;×&#x95;×&#x9d; ×&#x94;×&#x9e;×&#x97;×&#x93;×&#x9c;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x94;×&#x92;×&#x93;×&#x9c;×ª ×&#x9b;×&#x99;×¡×&#x95;×&#x99; × ×&#x96;×§×&#x99; ×&#x92;×&#x95;×£&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:33,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f; ×&#x90;×&#x95; ×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×¤×&#x95;×&#x9c;×&#x99;×¡×&#x94; ×¤×&#x9c;×&#x95;×¡&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f; ×&#x90;×&#x95; ×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x90;×&#x99; × ×&#x94;×&#x99;×&#x92;×&#x94; ×&#x91;×©×&#x91;×ª ×&#x95;×&#x97;×&#x92;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:5,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×¨×§ ×&#x90;×&#x9d; ×&#x9b;×&#x9c; × ×&#x94;×&#x92;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9c;×&#x9b;×&#x9c; × ×&#x94;×&#x92;:×&#x9c;×&#x99;×&#x93;×&#x94; ×¦×¢×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×¨×§ ×&#x9c;×&#x9b;×&#x9c; × ×&#x94;×&#x92;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9c;×&#x9b;×&#x9c; × ×&#x94;×&#x92;: × ×&#x94;×&#x92; ×&#x97;×&#x93;×©&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×&#x9b;×&#x9f; ×&#x90;×&#x95; ×&#x9c;×&#x90;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;×&#x92;× ×&#x94; ×&#x9e;×©×¤×&#x98;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x9e;×¡&apos; ×&#x94;×¨×&#x99;×©×&#x95;×&#x99; ×&#x9e;×&#x95;×§×©  ×&#x91;×&#x9e;×¡×&#x9a; ×&#x94;×§×&#x95;×&#x93;×&#x9d;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9e;×¡&apos; ×¨×&#x99;×©×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;4552313&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x9b;×&#x9e;×&#x95;×¤×&#x99;×¢ ×&#x91;×¨×©×&#x99;×&#x95;×&#x9f; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©×&#x9c;×&#x93;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;118597201945&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:13},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x94;×§×© ×¡×&#x9e;×§ ×&#x91;×¤×¨×&#x98;×&#x99; ×&#x95;×&#x9e;×©×§×&#x9c; ×&#x91;×&#x9e;×¡×&#x97;×¨×&#x99;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¡×&#x9e;×§/×&#x9e;×©×§×&#x9c;&quot;,&quot;tochenSade&quot;:&quot;1364&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:13},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:25,&quot;mSeif&quot;:100100,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;× ×ª×&#x95;× ×&#x99;×&#x9d; ×&#x9b;×&#x9c;×&#x9c;×&#x99;×&#x99;×&#x9d; -&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001000000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00100&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00109 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100109,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:18,&quot;mSeif&quot;:100109,&quot;mSeifSecondary&quot;:100109,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00109 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001090000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×ª×§×&#x9c;×ª ×&#x9e;×¡×&#x93; × ×ª×&#x95;× ×&#x99;×&#x9d;-×&#x9c;×&#x90; ×&#x9e;×&#x95;×¦×&#x90; ×¤×¢× ×&#x95;×&#x97; ×&#x9c;- ×©× ×&#x94; ×¨×&#x90;×©×&#x95;× ×&#x94;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:true,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00109&quot;,&quot;status&quot;:&quot;×&#x91;&quot;}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="19. 1st year" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">109</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="20. 2nd year" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="20.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">109</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="21. 3rd year" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="21.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">109</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="22. Vetek details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="22.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00109 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100109,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;2&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×¨×&#x90;×©×&#x95;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×ª×&#x91;×&#x99;×¢×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;2&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×©× ×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×©× ×&#x94; ×©× ×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;2&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×©×&#x9c;×&#x99;×©×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×©× ×&#x94; ×©×&#x9c;×&#x99;×©×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x90;×&#x9e;×&#x99;×ª×&#x99; ×&#x9e;× ×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×&#x9e;× ×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x97;×&#x91;×¨×&#x94; ×&#x90;×&#x97;×¨×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×&#x97;×&#x91;×¨×&#x94; ×&#x90;×&#x97;×¨×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x94;×&#x9b; ×&#x95;×&#x95;×ª×§&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x94;,×&#x9b; ×ª×&#x91;×&#x99;×¢×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×¨×&#x92;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 1&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¦×&#x95;×&#x95;×ª ×¢×&#x91;×¨ ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x95;×¡×&#x9a; ×&#x94;×¡×&#x93;×¨ ×©× ×&#x94; ×&#x90;×&#x97;×¨×&#x95;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x95;×¡×&#x9a; ×&#x94;×¡×&#x93;×¨ ×©× ×&#x94; ×©× ×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x95;×¡×&#x9a; ×&#x94;×¡×&#x93;×¨ ×©× ×&#x94; ×©×&#x9c;×&#x99;×©×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:12},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:18,&quot;mSeif&quot;:100109,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00109 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001090000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×ª×§×&#x9c;×ª ×&#x9e;×¡×&#x93; × ×ª×&#x95;× ×&#x99;×&#x9d;-×&#x9c;×&#x90; ×&#x9e;×&#x95;×¦×&#x90; ×¤×¢× ×&#x95;×&#x97; ×&#x9c;- ×©× ×&#x94; ×¨×&#x90;×©×&#x95;× ×&#x94;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00109&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="23. Number of users" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="23.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;90-00010 0000033&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:9000010,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x91;×¢×&#x9c;×&#x95;×ª ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x97;× ×&#x99;×&#x94; ×¤×¨×&#x98;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×§\&quot;×&#x9e; ×&#x99;×&#x95;×&#x9e;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×¤×¢×&#x99;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:3},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:4,&quot;mSeif&quot;:9000010,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;90-00010 0000033&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×&#x98;×&#x99; ×&#x97;×&#x95;×&#x91;×&#x94; ×&#x91;×&#x9c;×&#x91;×&#x93;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;90&quot;,&quot;mRSSeif&quot;:&quot;00010 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:90000100000,&quot;mText&quot;:0,&quot;msg&quot;:&quot; ×&#x99;×© ×&#x9c;×&#x94;×&#x9b;× ×&#x99;×¡ ×&#x90;×ª ×&#x9e;×¡×¤×¨ ×&#x9e;×¤×¢×&#x99;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91;  [1087]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;90-00010&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="24. Youngest driver details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;90-00041 0000163&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:9000041,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:22,&quot;mSeif&quot;:9000041,&quot;mSeifSecondary&quot;:9000041,&quot;mShurotHakrana&quot;:16,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;90-00041 0000163&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×&#x98;×&#x99; ×&#x94;× ×&#x94;×&#x92; ×&#x94;×¦×¢×&#x99;×¨ ×&#x91;×&#x99;×&#x95;×ª×¨&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;16&quot;,&quot;mRSPerek&quot;:&quot;90&quot;,&quot;mRSSeif&quot;:&quot;00041 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:90000410000,&quot;mText&quot;:0,&quot;msg&quot;:&quot; ×&#x90;× ×&#x90; ×&#x94;×§×© ×&#x9e;×¦×&#x91; ×&#x9e;×©×¤×&#x97;×ª×&#x99; [529]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:true,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;90-00041&quot;,&quot;status&quot;:&quot;×&#x91;&quot;}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24.02 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">90</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">41</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="25. Conclusion" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;90-00041 0000163&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:9000041,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:15,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x9e;×©×¤×&#x97;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:15,&quot;shemSade&quot;:&quot;×©×¤ ×¤×¨×&#x98;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;×&#x99;×©×¨×&#x90;×&#x9c;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×ª.×&#x96;.&quot;,&quot;tochenSade&quot;:&quot;304804990&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×&#x9c;×&#x99;×&#x93;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;11111989&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x92;×&#x99;×&#x9c; × ×&#x94;×&#x92;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×¨×©×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;03062008&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¨×©×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:31,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;× ×&#x94;×&#x92; ×¢×&#x99;×§×¨×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;1&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:15,&quot;shemSade&quot;:&quot;×&#x9e;×¦×&#x91; ×&#x9e;×©×¤×&#x97;×ª×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×©×&#x9c;×&#x99;×&#x9c;×ª ×¨×©×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x97;×&#x95;×&#x91;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:14},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×¨×&#x99;×&#x95;×ª ×&#x90;×&#x95;×&#x95;×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:15},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:15},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x92;×&#x99;×&#x9c; ×&#x94;× ×&#x94;×&#x92; ×§×¡×§×&#x95;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x91;×¢ ×&#x9c;×&#x97;×&#x99;×©×&#x95;×&#x91; ×&#x97;×&#x95;×&#x91;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;× × ×&#x94;×&#x92; ×&#x97;×&#x93;×© ×§×¡×§×&#x95;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x95;×&#x95;×ª×§ × ×&#x94;×&#x99;×&#x92;×&#x94; ×&#x91;×&#x97;×&#x95;×&#x91;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x99;×&#x9e;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×©×&#x9c;×&#x99;×&#x9c;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:16},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94; ×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:16},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:22,&quot;mSeif&quot;:9000041,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:16,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;90-00041 0000163&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×&#x98;×&#x99; ×&#x94;× ×&#x94;×&#x92; ×&#x94;×¦×¢×&#x99;×¨ ×&#x91;×&#x99;×&#x95;×ª×¨&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;16&quot;,&quot;mRSPerek&quot;:&quot;90&quot;,&quot;mRSSeif&quot;:&quot;00041 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:90000410000,&quot;mText&quot;:0,&quot;msg&quot;:&quot; ×&#x90;× ×&#x90; ×&#x94;×§×© ×&#x9e;×¦×&#x91; ×&#x9e;×©×¤×&#x97;×ª×&#x99; [529]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;90-00041&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25.02 /assets/img/bag-money.svg" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${front-end-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/assets/img/bag-money.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25.03 /api/financial-summary/initialize-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="insuredId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insuredId</stringProp>
                  <stringProp name="Argument.value">304804990</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchCode</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTchila" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTchila</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTom</stringProp>
                  <stringProp name="Argument.value">20210430</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/financial-summary/initialize-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25.04 /api/credit-card/get-credit-card-fee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="premiumBruto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumBruto</stringProp>
                  <stringProp name="Argument.value">4846</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="premiumNeto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumNeto</stringProp>
                  <stringProp name="Argument.value">3342</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="paymentsNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">paymentsNumber</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maslulAshrai" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">maslulAshrai</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/credit-card/get-credit-card-fee</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 2 - HTTP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">21</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${hour}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="01. Login (Execute Once)" enabled="true">
          <stringProp name="TestPlan.comments">k90fis1   ~    fis1</stringProp>
        </OnceOnlyController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01. Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01 /api/authentication/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;oauthFragment&quot;:&quot;ext_target=sys&amp;user=k90fis1&amp;passwd=ZmlzMQ==&quot;,&quot;mode&quot;:&quot;man&quot;,&quot;uniqueVisitId&quot;:&quot;v-clczrrecxuupsx42755i&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/authentication/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}/authentication?allowReturn=true&amp;mode=man</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02 /api/application-scm-info/get-all-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-scm-info/get-all-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03 /api/application-properties/get-environment" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-properties/get-environment</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02. Addition" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.01 /api/title/action-code-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/action-code-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03. Policy" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.01 /api/main/get-two-correct-first-digits-for-policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="policyId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyId</stringProp>
                  <stringProp name="Argument.value">032200652119500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/get-two-correct-first-digits-for-policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.02 /api/title/get-title-data-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="screenActionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenActionCode</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">32200652119500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-title-data-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.03 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20190701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20200630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.04 /api/policy-messages/get-policy-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">32200652119500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/policy-messages/get-policy-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.05 /api/title/get-branch-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-branch-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="04. From date" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.01 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200514</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20200630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.02 /api/main-queries/get-details-from-t5200-anafim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200514</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-details-from-t5200-anafim</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="05. Personal details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05.01 /api/underwriting/get-personal-details-initial" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is-vehicle-branch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is-vehicle-branch</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">form-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policy-no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policy-no</stringProp>
                  <stringProp name="Argument.value">032200652119500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branch-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branch-code</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">903017</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/get-personal-details-initial</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="06. Sections" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.01 /api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0200&quot;:{&quot;user&quot;:null,&quot;mekish&quot;:0,&quot;ashraiChova&quot;:0,&quot;ashraiPhoneVerify&quot;:0,&quot;ashraiPhoneVerifyChova&quot;:0,&quot;autoTopRoundNum&quot;:0,&quot;idKartisOwner&quot;:0,&quot;idKartisOwnerChova&quot;:0,&quot;idRequestShvaAshrai&quot;:0,&quot;idRequestShvaAshraiChova&quot;:0,&quot;ishurChidush&quot;:0,&quot;maslolAshrai&quot;:&quot;  &quot;,&quot;maslolAshraiChova&quot;:&quot;  &quot;,&quot;misparIskatAshrai&quot;:0,&quot;misparIskatAshraiChova&quot;:0,&quot;misparKartisAshrai&quot;:&quot;&quot;,&quot;misparKartisAshraiChova&quot;:&quot;&quot;,&quot;misparTashlumimAshrai&quot;:0,&quot;misparTashlumimAshraiChova&quot;:0,&quot;payerIdType&quot;:0,&quot;payerIdTypeChova&quot;:0,&quot;prorata&quot;:1,&quot;schumMeusharAshrai&quot;:0,&quot;schumMeusharAshraiChova&quot;:0,&quot;shemKartisOwner&quot;:&quot;&quot;,&quot;shemKartisOwnerChova&quot;:&quot;&quot;,&quot;sugKartisAshrai&quot;:0,&quot;sugKartisAshraiChova&quot;:0,&quot;taarichPagTokefAshrai&quot;:0,&quot;taarichPagTokefAshraiChova&quot;:0,&quot;bank&quot;:31,&quot;bemkomPol&quot;:0,&quot;cellTel&quot;:&quot;0545790890&quot;,&quot;chevraKodemet&quot;:0,&quot;chova&quot;:0,&quot;codePolisaChasera&quot;:0,&quot;codeChazara&quot;:0,&quot;codeHazmada&quot;:71,&quot;codePeula&quot;:&quot;3&quot;,&quot;codePeulaMasach&quot;:40,&quot;codeR5060&quot;:0,&quot;codeSikun&quot;:1,&quot;ezorRaash&quot;:69,&quot;goremKefel&quot;:0,&quot;hodatShgia&quot;:&quot;&quot;,&quot;ifiunNosaf&quot;:0,&quot;ishuv&quot;:&quot;×ª×&#x9c; ×&#x90;×&#x91;×&#x99;×&#x91;&quot;,&quot;ktovet&quot;:&quot;×¢×&#x9e;×&#x99;×&#x97;×&#x99; ×¤×&#x90;×&#x92;×&#x9c;×&#x99;×&#x9f; 8/17&quot;,&quot;ktovetBapolisa&quot;:&quot;                       â&#x80;&#x8f;&quot;,&quot;mChatam&quot;:1,&quot;mHeskemBriut&quot;:0,&quot;mHoraatKeva&quot;:314095,&quot;mAnaf&quot;:22,&quot;mCheshbon&quot;:105114502,&quot;mChevraZara&quot;:0,&quot;mMevutach&quot;:53271516,&quot;mPolisa&quot;:32200652119500,&quot;mPolisaKodemet&quot;:0,&quot;mPolisaZar&quot;:0,&quot;mRishui&quot;:0,&quot;mSochen&quot;:903017,&quot;mSochnimNosafim&quot;:0,&quot;mTashlumim&quot;:12,&quot;mikud&quot;:6958429,&quot;misparBayit&quot;:&quot;000000 &quot;,&quot;msLakuahSochen&quot;:125,&quot;nPolDira&quot;:&quot;0000000000000&quot;,&quot;ofenGvia&quot;:1,&quot;polisaMamshicha&quot;:0,&quot;semelIshuv&quot;:0,&quot;semelSikun&quot;:1,&quot;sex&quot;:0,&quot;shemAnglit&quot;:&quot;&quot;,&quot;shemBapolisa&quot;:&quot;                        â&#x80;&#x8f;&quot;,&quot;shemCheshbon&quot;:&quot;×ª×&#x91;×&#x92;×&#x9d;×¤×¨×&#x9f;×&#x9f;×&#x94; ×ª×¦×&#x99;×&#x92;&quot;,&quot;shemMevutach&quot;:&quot;×&#x90;×¡×ª×¨                                   â&#x80;&#x8f;&quot;,&quot;shemMishpacha&quot;:&quot;×&#x90;×&#x95;×¨× ×©×&#x98;×&#x99;×&#x99;×&#x9f;&quot;,&quot;shilda&quot;:0,&quot;shinuiHachsara&quot;:0,&quot;shinuiHosafa&quot;:0,&quot;shnotLimud&quot;:0,&quot;snif&quot;:21,&quot;sochenSnif&quot;:0,&quot;sochenSochnut&quot;:0,&quot;sochenNosaf&quot;:[{&quot;achuzSochen&quot;:0,&quot;msochen&quot;:0},{&quot;achuzSochen&quot;:0,&quot;msochen&quot;:0}],&quot;sugPolisaBriut&quot;:0,&quot;sugChiuv&quot;:0,&quot;sugEsek&quot;:0,&quot;szEMail&quot;:&quot;&quot;,&quot;tel&quot;:&quot;&quot;,&quot;tkufatBit&quot;:48,&quot;trProd&quot;:0,&quot;trTchilatMismachKodem&quot;:20190701,&quot;trHazaaMekorit&quot;:20200407,&quot;trLeida&quot;:0,&quot;trRishui&quot;:0,&quot;trTchila&quot;:20200514,&quot;trTchilatPol&quot;:20190701,&quot;trTom&quot;:20200630,&quot;codeHakpaa&quot;:0,&quot;kaskoChova&quot;:0,&quot;soog&quot;:1,&quot;ofenGviaDesc&quot;:&quot;×&#x94;×&#x95;×¨×&#x90;×ª ×§×&#x91;×¢&quot;},&quot;eltr0300ActionCode&quot;:3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="07. Choose building" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00060 0000053&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100060,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30728,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:13,&quot;mSeif&quot;:100060,&quot;mSeifSecondary&quot;:100085,&quot;mShurotHakrana&quot;:5,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00060 0000053&quot;,&quot;shemSeif&quot;:&quot;×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;05&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00060 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000600000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:null,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00060&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true,&quot;action&quot;:1,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000850000},{&quot;clause&quot;:1000900000},{&quot;clause&quot;:1001090000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000070&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100085,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:10,&quot;mSeif&quot;:100085,&quot;mSeifSecondary&quot;:100085,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000070&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00085 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000850000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00085&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000900000},{&quot;clause&quot;:1001090000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.03 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">85</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200514</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="08. Cover building" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.01 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">85</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200514</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100085,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:36,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:13,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x9b;×&#x99;×¡×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:2,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:4,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:115,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:26,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x93;×&#x99;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;3&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×ª×&#x95;×&#x9a;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×©×&#x98;×&#x97; ×&#x94;×&#x93;×&#x99;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;145&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×&#x91;×&#x99;×¦×&#x95;×¢ ×¡×§×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:99,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:125,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:31,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x94;×¡×&#x95;×§×¨&quot;,&quot;tochenSade&quot;:&quot;99&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:45,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x99;×&#x9e;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:7},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:10,&quot;mSeif&quot;:100085,&quot;mSeifSecondary&quot;:100090,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00085 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000850000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00085&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000900000},{&quot;clause&quot;:1001090000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000120&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100090,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:22,&quot;mSeif&quot;:100090,&quot;mSeifSecondary&quot;:100090,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000120&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x94;×¨×&#x97;×&#x91;×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00090 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000900000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00090&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1001090000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="09. Content chapter" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100090,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;753937&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:117,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94; ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:5,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:116,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:17,&quot;shemSade&quot;:&quot;×¦× ×¨×ª&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x95;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:42,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x98;×¨×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x9e;×¤×&#x95;×¦×&#x9c;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×¡&apos; ×&#x99;×&#x97;×&#x93;×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x92;×&#x92; ×&#x99;×&#x91;×©&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x91;×&#x9c;×ª×&#x99; ×&#x9e;×&#x99;×&#x95;×©×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x97;×¡×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9c;×&#x99;×&#x9d; ×¡× ×&#x98;×¨×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91;-×&#x93;×&#x99;×&#x99;×¨ ×&#x9e;×©× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×&#x9c;×&#x90; ×&#x9e;×¡×&#x9b;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:44,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:1,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x94;\&quot;×¡ ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:12},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:22,&quot;mSeif&quot;:100090,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x94;×¨×&#x97;×&#x91;×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00090 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000900000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00090&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1001090000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10. Content" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100200,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:21,&quot;mSeif&quot;:100200,&quot;mSeifSecondary&quot;:100200,&quot;mShurotHakrana&quot;:11,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×§ ×&#x94;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;11&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00200 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1002000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x90;× ×&#x90; ×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94; [604]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00200&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100200,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;250000&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¨.×&#x90;×&#x93;×&#x9e;×&#x94; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:13,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:126,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b;&quot;,&quot;tochenSade&quot;:&quot;13&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x9b;×©×&#x99;×&#x98;×&#x99;×&#x9d; ×&#x91;×&#x9b;×&#x94;\&quot;×¡&quot;,&quot;tochenSade&quot;:&quot;${delay_min}&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:1,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9e;×ª×&#x95;×&#x9b;×&#x9d; ×&#x9b;×&#x94;\&quot;×¡&quot;,&quot;tochenSade&quot;:&quot;${delay_min}&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x98;×&#x9c;×&#x95;×&#x99;×&#x96;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;× ×&#x94;×&#x9c;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x92;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:18,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x94;×©×ª×ª×¤×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x91;×&#x9c;×ª×&#x99; ×&#x9e;×&#x99;×&#x95;×©×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x97;×©×&#x91; × ×&#x99;×©×&#x90;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;× ×&#x96;×§ ×&#x9e;×&#x99;×&#x9d; ×&#x9c;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x90;×&#x95;×¡×¤×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×©×&#x91;×¨ ×&#x96;×&#x9b;×&#x95;×&#x9b;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 6&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:9,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×¤×&#x9c; ×&#x93;×&#x90;×©&quot;,&quot;tochenSade&quot;:&quot;9&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:11},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:21,&quot;mSeif&quot;:100200,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:11,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×§ ×&#x94;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;11&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00200 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1002000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x90;× ×&#x90; ×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94; [604]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00200&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2002000000},{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11. Additional value" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200220,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:1,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200220,&quot;mSeifSecondary&quot;:200220,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;headLineSB&quot;:950000,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200220,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:950000},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200220,&quot;mSeifSecondary&quot;:200290,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:950000,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002900000},{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00290 0000020&quot;,&quot;headLineSB&quot;:753937,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0.105,&quot;headLinePremium&quot;:792,&quot;lines&quot;:null,&quot;mSeif&quot;:200290,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:1,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200290,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00290 0000020&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;  ×&#x9c;×&#x9e;×&#x91;× ×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00290 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002900000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00290&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:true,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.04 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200291,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:3,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:2,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200291,&quot;mSeifSecondary&quot;:200291,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00291 00&quot;,&quot;mRSSeifChadash&quot;:&quot;2&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002910000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x94;×©×&#x9c;×&#x9d; × ×ª×&#x95;× ×&#x99;×&#x9d;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:1,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00291&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.05 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200291,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:41,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;JKUI&quot;,&quot;tochenSade&quot;:&quot;950000&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:2},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:3,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:2,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200291,&quot;mSeifSecondary&quot;:200296,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00291 00&quot;,&quot;mRSSeifChadash&quot;:&quot;2&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002910000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x94;×©×&#x9c;×&#x9d; × ×ª×&#x95;× ×&#x99;×&#x9d;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:1,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00291&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002960000},{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.06 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0000010&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200296,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30728,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200296,&quot;mSeifSecondary&quot;:200296,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:1,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0000010&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99; - ×&#x9e;×&#x91;× ×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00296 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002960000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:null,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00296&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:true,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true,&quot;action&quot;:1}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002960001},{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.07 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0001010&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200296,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200296,&quot;mSeifSecondary&quot;:200296,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:1,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0001010&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99; - ×&#x9e;×&#x91;× ×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;01&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00296 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002960001,&quot;mText&quot;:1,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00296&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:true,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12. Additional sections" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.01 /api/main-queries/get-permissions-from-tGroupsMembers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="groupId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">groupId</stringProp>
                  <stringProp name="Argument.value">54</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-permissions-from-tGroupsMembers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13. Add text" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0001010&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200296,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30732,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200296,&quot;mSeifSecondary&quot;:200296,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:1,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00296 0001010&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99; - ×&#x9e;×&#x91;× ×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;01&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00296 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002960001,&quot;mText&quot;:1,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:[&quot;   ×&#x9e;×&#x95;\&quot;×&#x9e; ×&#x91;×&#x96;×&#x94; ×&#x9b;×&#x99; ×&#x94;×&#x93;×&#x99;×&#x99;×¨×&#x99;×&#x9d; ×&#x95;×¨×&#x9b;×&#x95;×©×&#x9d; ×&#x99;×&#x97;×©×&#x91;×&#x95; ×&#x9b;×¦×&#x93; ×&#x92;&apos; ×&#x91;×¤×&#x95;×&#x9c;×&#x99;×¡×&#x94; ×&#x96;×&#x95;.&quot;,&quot;&quot;,&quot;   ===============================================================&quot;,&quot;   ×&#x9e;×&#x95;\&quot;×&#x9e; ×&#x91;×&#x96;×&#x94; ×&#x9b;×&#x99; ×ª×©×&#x9c;×&#x95;×&#x9e;×&#x99;×&#x9d; ×¢×&#x93; ×¡×&#x9b;×&#x95;×&#x9d; ×©×&#x9c; 20,000 ×©\&quot;×&#x97; ×&#x99;×©×&#x95;×&#x9c;×&#x9e;×&#x95; ×&#x99;×©×&#x99;×¨×&#x95;×ª ×&#x9c;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;.&quot;,&quot;   ===============================================================&quot;,&quot;&quot;,&quot;&quot;,&quot;×©×&#x9c;×&#x95;×&#x9d; ×&#x9c;×&#x9b;×&#x95;×&#x9c;×&#x9d;&quot;,&quot;×&#x91;×&#x93;×&#x99;×§×ª ×&#x94;×&#x95;×¡×¤×ª ×&#x9e;×&#x9c;×&#x9c; ×¢×&#x9c; ×&#x92;×&#x91;×&#x99; ×&#x9e;×&#x9c;×&#x9c;&quot;],&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00296&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:true,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2002980000},{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14. Add policy value" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00298 0000020&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200298,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:1,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200298,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00298 0000020&quot;,&quot;shemSeif&quot;:&quot;×¡×¢×&#x99;×£ ×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91; ×&#x9b;× ×&#x92;×&#x93; ×&#x93;×&#x99;×&#x99;×¨/×&#x9e;×©×&#x9b;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00298 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002980000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00298&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:true,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200310,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200310,&quot;mSeifSecondary&quot;:200310,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×ª ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×ª×§×&#x9f; ×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00310 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2003100000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00310&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;headLineSB&quot;:200000,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0.035,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200310,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:200000},{&quot;tochenSade&quot;:0.035},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200310,&quot;mSeifSecondary&quot;:300500,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0.035,&quot;premia&quot;:0,&quot;schumBituach&quot;:200000,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×ª ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×ª×§×&#x9f; ×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00310 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2003100000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00310&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15. Finish" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00311 0000023&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200311,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:1,&quot;mSdotKeletBeseif&quot;:2,&quot;mSeif&quot;:200311,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00311 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;  ×&#x9c;×&#x9e;×&#x91;× ×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00311 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2003110000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00311&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:3005000000},{&quot;clause&quot;:3005300000},{&quot;clause&quot;:3006000000},{&quot;clause&quot;:3007010000},{&quot;clause&quot;:3008100000},{&quot;clause&quot;:4008000000},{&quot;clause&quot;:11000010000},{&quot;clause&quot;:11000100000},{&quot;clause&quot;:11010000000},{&quot;clause&quot;:11010020000},{&quot;clause&quot;:99010000000},{&quot;clause&quot;:99010100000},{&quot;clause&quot;:99010110000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.02 /api/financial-summary/initialize-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="insuredId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insuredId</stringProp>
                  <stringProp name="Argument.value">53271516</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">32200652119500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchCode</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTchila" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTchila</stringProp>
                  <stringProp name="Argument.value">20200514</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTom</stringProp>
                  <stringProp name="Argument.value">20200630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/financial-summary/initialize-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.03 /api/credit-card/get-credit-card-fee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="premiumBruto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumBruto</stringProp>
                  <stringProp name="Argument.value">321</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="premiumNeto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumNeto</stringProp>
                  <stringProp name="Argument.value">219</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="paymentsNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">paymentsNumber</stringProp>
                  <stringProp name="Argument.value">12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maslulAshrai" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">maslulAshrai</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/credit-card/get-credit-card-fee</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 3 - HTTP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">31</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${hour}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="01. Login (Execute Once)" enabled="true">
          <stringProp name="TestPlan.comments">k90fis1   ~    fis1</stringProp>
        </OnceOnlyController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01. Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01 /api/authentication/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;oauthFragment&quot;:&quot;ext_target=sys&amp;user=k90fis1&amp;passwd=ZmlzMQ==&quot;,&quot;mode&quot;:&quot;man&quot;,&quot;uniqueVisitId&quot;:&quot;v-clczrrecxuupsx42755i&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/authentication/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}/authentication?allowReturn=true&amp;mode=man</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02 /api/application-scm-info/get-all-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-scm-info/get-all-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03 /api/application-properties/get-environment" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-properties/get-environment</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02. Addition" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.01 /api/title/action-code-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/action-code-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03. Policy" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.01 /api/main/get-two-correct-first-digits-for-policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="policyId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyId</stringProp>
                  <stringProp name="Argument.value">040800354119700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/get-two-correct-first-digits-for-policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.02 /api/title/get-title-data-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="screenActionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenActionCode</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">40800354119700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-title-data-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.03 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20190901</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20200831</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.04 /api/policy-messages/get-policy-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">40800354119700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/policy-messages/get-policy-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.05 /api/title/get-branch-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-branch-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="04. From date" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.01 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20200831</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.02 /api/main-queries/get-details-from-t5200-anafim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-details-from-t5200-anafim</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="05. Personal details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05.01 /api/underwriting/get-personal-details-initial" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is-vehicle-branch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is-vehicle-branch</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">form-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policy-no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policy-no</stringProp>
                  <stringProp name="Argument.value">040800354119700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branch-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branch-code</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">904775</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/get-personal-details-initial</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="06. Sections" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.01 /api/main/update-lakoach" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lakoach&quot;:{&quot;codePeula&quot;:1,&quot;mLakoach&quot;:62362835,&quot;shemLakoach&quot;:&quot;×&#x97;×&#x99;×&#x99;×&#x9d;                                   â&#x80;&#x8f;&quot;,&quot;shemMishpacha&quot;:&quot;×&#x90;×&#x98;×&#x99;×&#x90;×¡&quot;,&quot;mikud&quot;:2450706,&quot;ktovet&quot;:&quot;×&#x99;×&#x94;×&#x95;×©×¤×&#x98; 19&quot;,&quot;misparBayit&quot;:&quot;000000 &quot;,&quot;ishuv&quot;:&quot;×¢×&#x9b;×&#x95;&quot;,&quot;shemAnglit&quot;:&quot;&quot;,&quot;soog&quot;:1,&quot;msLakuahSochen&quot;:0,&quot;tel&quot;:&quot;&quot;,&quot;cellTel&quot;:&quot;&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/update-lakoach</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.02 /api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0200&quot;:{&quot;user&quot;:null,&quot;mekish&quot;:0,&quot;ashraiChova&quot;:0,&quot;ashraiPhoneVerify&quot;:0,&quot;ashraiPhoneVerifyChova&quot;:0,&quot;autoTopRoundNum&quot;:0,&quot;idKartisOwner&quot;:62362835,&quot;idKartisOwnerChova&quot;:0,&quot;idRequestShvaAshrai&quot;:0,&quot;idRequestShvaAshraiChova&quot;:0,&quot;ishurChidush&quot;:0,&quot;maslolAshrai&quot;:&quot;4×&#x9e;&quot;,&quot;maslolAshraiChova&quot;:&quot;  &quot;,&quot;misparIskatAshrai&quot;:2640579,&quot;misparIskatAshraiChova&quot;:0,&quot;misparKartisAshrai&quot;:&quot;5326104425800681&quot;,&quot;misparKartisAshraiChova&quot;:&quot;&quot;,&quot;misparTashlumimAshrai&quot;:2,&quot;misparTashlumimAshraiChova&quot;:0,&quot;payerIdType&quot;:1,&quot;payerIdTypeChova&quot;:1,&quot;prorata&quot;:1,&quot;schumMeusharAshrai&quot;:3258,&quot;schumMeusharAshraiChova&quot;:0,&quot;shemKartisOwner&quot;:&quot;×&#x90;×&#x98;×&#x99;×&#x90;×¡ ×&#x97;×&#x99;×&#x99;×&#x9d;&quot;,&quot;shemKartisOwnerChova&quot;:&quot;&quot;,&quot;sugKartisAshrai&quot;:1,&quot;sugKartisAshraiChova&quot;:0,&quot;taarichPagTokefAshrai&quot;:20200301,&quot;taarichPagTokefAshraiChova&quot;:0,&quot;bank&quot;:20,&quot;bemkomPol&quot;:0,&quot;cellTel&quot;:&quot;&quot;,&quot;chevraKodemet&quot;:0,&quot;chova&quot;:0,&quot;codePolisaChasera&quot;:0,&quot;codeChazara&quot;:0,&quot;codeHazmada&quot;:71,&quot;codePeula&quot;:&quot;3&quot;,&quot;codePeulaMasach&quot;:40,&quot;codeR5060&quot;:0,&quot;codeSikun&quot;:1,&quot;ezorRaash&quot;:24,&quot;goremKefel&quot;:0,&quot;hodatShgia&quot;:&quot;&quot;,&quot;ifiunNosaf&quot;:0,&quot;ishuv&quot;:&quot;×¢×&#x9b;×&#x95;&quot;,&quot;ktovet&quot;:&quot;×&#x99;×&#x94;×&#x95;×©×¤×&#x98; 19&quot;,&quot;ktovetBapolisa&quot;:&quot;                       â&#x80;&#x8f;&quot;,&quot;mChatam&quot;:1,&quot;mHeskemBriut&quot;:0,&quot;mHoraatKeva&quot;:819019,&quot;mAnaf&quot;:8,&quot;mCheshbon&quot;:438331,&quot;mChevraZara&quot;:0,&quot;mMevutach&quot;:62362835,&quot;mPolisa&quot;:40800354119700,&quot;mPolisaKodemet&quot;:0,&quot;mPolisaZar&quot;:0,&quot;mRishui&quot;:0,&quot;mSochen&quot;:904775,&quot;mSochnimNosafim&quot;:0,&quot;mTashlumim&quot;:0,&quot;mikud&quot;:2450706,&quot;misparBayit&quot;:&quot;000000 &quot;,&quot;msLakuahSochen&quot;:0,&quot;nPolDira&quot;:&quot;0000000000000&quot;,&quot;ofenGvia&quot;:5,&quot;polisaMamshicha&quot;:0,&quot;semelIshuv&quot;:0,&quot;semelSikun&quot;:1,&quot;sex&quot;:0,&quot;shemAnglit&quot;:&quot;&quot;,&quot;shemBapolisa&quot;:&quot;                        â&#x80;&#x8f;&quot;,&quot;shemCheshbon&quot;:&quot;&quot;,&quot;shemMevutach&quot;:&quot;×&#x97;×&#x99;×&#x99;×&#x9d;                                   â&#x80;&#x8f;&quot;,&quot;shemMishpacha&quot;:&quot;×&#x90;×&#x98;×&#x99;×&#x90;×¡&quot;,&quot;shilda&quot;:0,&quot;shinuiHachsara&quot;:0,&quot;shinuiHosafa&quot;:0,&quot;shnotLimud&quot;:0,&quot;snif&quot;:445,&quot;sochenSnif&quot;:0,&quot;sochenSochnut&quot;:0,&quot;sochenNosaf&quot;:[{&quot;achuzSochen&quot;:0,&quot;msochen&quot;:0},{&quot;achuzSochen&quot;:0,&quot;msochen&quot;:0}],&quot;sugPolisaBriut&quot;:0,&quot;sugChiuv&quot;:0,&quot;sugEsek&quot;:0,&quot;szEMail&quot;:&quot;&quot;,&quot;tel&quot;:&quot;&quot;,&quot;tkufatBit&quot;:123,&quot;trProd&quot;:0,&quot;trTchilatMismachKodem&quot;:20190901,&quot;trHazaaMekorit&quot;:20200423,&quot;trLeida&quot;:0,&quot;trRishui&quot;:19690201,&quot;trTchila&quot;:20200501,&quot;trTchilatPol&quot;:20190901,&quot;trTom&quot;:20200831,&quot;codeHakpaa&quot;:0,&quot;kaskoChova&quot;:0,&quot;soog&quot;:1,&quot;ofenGviaDesc&quot;:&quot;×&#x90;×©×¨×&#x90;×&#x99;×ª&quot;},&quot;eltr0300ActionCode&quot;:3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="07. Click on section 01-00100" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00040 0000060&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100040,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:1,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:8,&quot;mSeif&quot;:100040,&quot;mSeifSecondary&quot;:100100,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00040 0000060&quot;,&quot;shemSeif&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×&#x9e;×&#x9c;×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00040 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000400000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;01-00040&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;cardIsCollapsed&quot;:false,&quot;firstUncollapse&quot;:true,&quot;fromCollapseAllButton&quot;:false,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000430000},{&quot;clause&quot;:1000450000},{&quot;clause&quot;:1000460000},{&quot;clause&quot;:1000470000},{&quot;clause&quot;:1000500000},{&quot;clause&quot;:1000520000},{&quot;clause&quot;:1000600000},{&quot;clause&quot;:1000610000},{&quot;clause&quot;:1000900000},{&quot;clause&quot;:1001000000},{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2001350000},{&quot;clause&quot;:2004000000},{&quot;clause&quot;:2050010000},{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="08. Enter section 01-00100" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00100 0000130&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100100,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:1,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:1,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100100,&quot;mSeifSecondary&quot;:100100,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000130&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×&#x98;×&#x99;×&#x9d; ×&#x9b;×&#x9c;×&#x9c;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2001350000},{&quot;clause&quot;:2004000000},{&quot;clause&quot;:2050010000},{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="09. Finish section 01-00100" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00100 0000133&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100100,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×©&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¤×¨×&#x99;×¦×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:1,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94; ×&#x91;×&#x99;×ª ×&#x94;×¢×¡×§&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:31,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¤×¨×&#x99;×¦×&#x94; × ×&#x96;×§ ×¨×&#x90;×©×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;×&#x9b;× ×¡×&#x94; ×©× ×ª×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x97;×&#x91;×&#x95;×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¦×&#x93; ×©×&#x9c;×&#x99;×©&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×¡×¤×&#x99; ×&#x94;×¢×¡×§&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x9c;×§×&#x95;×&#x9c; ×¡×&#x97;×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94; ×&#x91;×&#x94;×¢×&#x91;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¦×&#x99;×&#x95;×&#x93; ×&#x90;×&#x9c;×§×&#x98;×¨×&#x95;× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x90;×&#x95;× ×&#x95;×ª ×&#x90;×&#x99;×©×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×&#x98;×¨×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×&#x99;×©×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:30,&quot;shemSade&quot;:&quot;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x91;×&#x93;×&#x9f; ×¨×&#x95;×&#x95;×&#x97;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x91;×&#x93;×&#x9f; - ×&#x98;×¨×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x90;×©&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×¤×¨×&#x99;×¦×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x97;×&#x91;×&#x95;×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:46,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x98;×&#x95;×¤ ×§×&#x95;×&#x93; 9&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:41,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x90;×&#x9c;×&#x99;×¤×&#x99;×&#x9d; 5,6 ×¤×&#x98;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;×¦×¢&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9b;×ª×&#x95;×&#x91;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:12},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100100,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×&#x98;×&#x99;×&#x9d; ×&#x9b;×&#x9c;×&#x9c;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00100&quot;,&quot;status&quot;:&quot;×§&quot;}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:2001000000},{&quot;clause&quot;:2001350000},{&quot;clause&quot;:2004000000},{&quot;clause&quot;:2050010000},{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10. Enter section 02-05001" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-05001 0000060&quot;,&quot;headLineSB&quot;:211790,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:205001,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:11,&quot;mSeif&quot;:205001,&quot;mSeifSecondary&quot;:205001,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-05001 0000060&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;05001 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2050010000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d; ×©×&#x92;×&#x95;×&#x99; [301]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-05001&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11. Add policy price" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-05001 0000063&quot;,&quot;headLineSB&quot;:211790,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:205001,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;211789&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 10&quot;,&quot;tochenSade&quot;:&quot;212000&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x99;×&#x95;×&#x96;×¨ ×&#x91;×&#x9b;×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x93;×&#x99;×§×&#x94; ×&#x99;×&#x95;×&#x96;×¨ ×&#x91;×&#x9b;×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x90;×&#x97;×&#x95;×&#x96; ×&#x9c;×&#x94;×&#x93;×¤×¡×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0.35&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¤×¨×&#x99;×¦×&#x94; ×&#x9e;×¦×&#x98;×&#x91;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;60000&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9b;×ª×&#x95;×&#x91;×&#x95;×ª ×¤×¨×&#x99;×¦×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×ª×&#x95;×&#x91;×ª ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×ª×&#x95;×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x9b;×ª×&#x95;×&#x91;×&#x95;×ª 1-45&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 42&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:6},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:211790},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:1,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:11,&quot;mSeif&quot;:205001,&quot;mSeifSecondary&quot;:400100,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:211790,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-05001 0000063&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;05001 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2050010000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d; ×©×&#x92;×&#x95;×&#x99; [301]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-05001&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300100,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:19,&quot;mSeif&quot;:300100,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;×&#x97;×&#x91;×&#x95;×ª ×&#x9e;×¢×&#x91;×&#x99;×&#x93; - ×&#x9e;×¡&apos; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;03-00100&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12. Enter section 03-00100" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-05001 0000063&quot;,&quot;headLineSB&quot;:211790,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:205001,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;211789&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 10&quot;,&quot;tochenSade&quot;:&quot;212000&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x99;×&#x95;×&#x96;×¨ ×&#x91;×&#x9b;×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x93;×&#x99;×§×&#x94; ×&#x99;×&#x95;×&#x96;×¨ ×&#x91;×&#x9b;×&#x99;×¨&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x90;×&#x97;×&#x95;×&#x96; ×&#x9c;×&#x94;×&#x93;×¤×¡×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0.35&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¤×¨×&#x99;×¦×&#x94; ×&#x9e;×¦×&#x98;×&#x91;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;60000&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9b;×ª×&#x95;×&#x91;×&#x95;×ª ×¤×¨×&#x99;×¦×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×ª×&#x95;×&#x91;×ª ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×ª×&#x95;×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;×&#x9b;×ª×&#x95;×&#x91;×&#x95;×ª 1-45&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 42&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:6},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:211790},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:1,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:11,&quot;mSeif&quot;:205001,&quot;mSeifSecondary&quot;:400100,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:211790,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-05001 0000063&quot;,&quot;shemSeif&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;05001 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2050010000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×&#x9c;×&#x9e;×§×&#x95;×&#x9d; ×©×&#x92;×&#x95;×&#x99; [301]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-05001&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300100,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:19,&quot;mSeif&quot;:300100,&quot;mSeifSecondary&quot;:300100,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;×&#x97;×&#x91;×&#x95;×ª ×&#x9e;×¢×&#x91;×&#x99;×&#x93; - ×&#x9e;×¡&apos; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;headLineSB&quot;:20000000,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300100,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:4,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:12,&quot;shemSade&quot;:&quot;×&#x97;×&#x9c;×&#x95;×¤×&#x94;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x92;×&#x91;×&#x95;×&#x9c;×&#x95;×ª ×&#x90;×&#x97;×¨×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;6000000&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x92;×&#x91;×&#x95;×&#x9c;×&#x95;×ª ×&#x90;×&#x97;×¨×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;20000000&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:33,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9e;×&#x95;×ª ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d; ×&#x9c;×&#x90; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;244&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;244&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¡×&#x99;×&#x9b;×&#x95;×&#x9f; 1&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;× ×&#x99;×&#x9e;×&#x95;×&#x9d; ×¨×&#x9e;×&#x94; 2&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×&#x94;×©×&#x95;×&#x95;×&#x90;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94; ×&#x9c;×&#x9e;×©×¨×&#x93;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×©×&#x9b;×¨ ×¢×&#x91;×&#x95;×&#x93;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×¤×¨×&#x9e;×&#x99;×&#x94; ×&#x9c;×¡×¢×&#x99;×£&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:45,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×¢×&#x95;×&#x91;×&#x93; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:13},{},{},{},{},{},{},{&quot;tochenSade&quot;:20000000},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:19,&quot;mSeif&quot;:300100,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;×&#x97;×&#x91;×&#x95;×ª ×&#x9e;×¢×&#x91;×&#x99;×&#x93; - ×&#x9e;×¡&apos; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;03-00100&quot;}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13. Add employees" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;headLineSB&quot;:20000000,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300100,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:4,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:12,&quot;shemSade&quot;:&quot;×&#x97;×&#x9c;×&#x95;×¤×&#x94;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x92;×&#x91;×&#x95;×&#x9c;×&#x95;×ª ×&#x90;×&#x97;×¨×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;6000000&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x92;×&#x91;×&#x95;×&#x9c;×&#x95;×ª ×&#x90;×&#x97;×¨×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;20000000&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:33,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;5&quot;,&quot;msade&quot;:24,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9e;×&#x95;×ª ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d; ×&#x9c;×&#x90; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:21,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;244&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;244&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¡×&#x99;×&#x9b;×&#x95;×&#x9f; 1&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;× ×&#x99;×&#x9e;×&#x95;×&#x9d; ×¨×&#x9e;×&#x94; 2&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×&#x94;×©×&#x95;×&#x95;×&#x90;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94; ×&#x9c;×&#x9e;×©×¨×&#x93;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:22,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×©×&#x9b;×¨ ×¢×&#x91;×&#x95;×&#x93;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b; ×¤×¨×&#x9e;×&#x99;×&#x94; ×&#x9c;×¡×¢×&#x99;×£&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:23,&quot;mshuraBeseif&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:45,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×¢×&#x95;×&#x91;×&#x93; ×&#x9e;× ×&#x94;×&#x9c;×ª×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:25,&quot;mshuraBeseif&quot;:13},{},{},{},{},{},{},{&quot;tochenSade&quot;:20000000},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:19,&quot;mSeif&quot;:300100,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:13,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00100 0000133&quot;,&quot;shemSeif&quot;:&quot;×&#x97;×&#x91;×&#x95;×ª ×&#x9e;×¢×&#x91;×&#x99;×&#x93; - ×&#x9e;×¡&apos; ×¢×&#x95;×&#x91;×&#x93;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;13&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;03-00100&quot;}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:4001000000},{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00202 0000093&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:500202,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:12,&quot;mSeif&quot;:500202,&quot;mSeifSecondary&quot;:500202,&quot;mShurotHakrana&quot;:9,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:20000000,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00202 0000093&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94; ×&#x91;×&#x94;×¢×&#x91;×¨×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;09&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00202 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002020000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;05-00202&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14. Items" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00202 0000093&quot;,&quot;headLineSB&quot;:50000,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:1,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:500202,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:31,&quot;shemSade&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:30,&quot;shemSade&quot;:&quot;×ª×&#x90;×&#x95;×¨ ×&#x94;×¡×&#x97;×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;×&#x90;×&#x99;×&#x9f; ×ª×&#x90;×&#x95;×¨&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:31,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9b;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9c;×&#x9e;×§×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;50000&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×&#x9c;×&#x9b;×&#x9c; ×&#x94;×ª×§×&#x95;×¤×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0.5&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:16,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×&#x9e;×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0.5&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x95;×&#x9f; ×§×&#x95;×&#x93;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94; ×&#x91;×&#x94;×¢×&#x91;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×©×§×&#x9c;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x93;×&#x95;×&#x9c;×¨×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×&#x99;×&#x95;×&#x96;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:8},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:50000},{&quot;tochenSade&quot;:1},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:12,&quot;mSeif&quot;:500202,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:9,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:20000000,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00202 0000093&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94; ×&#x91;×&#x94;×¢×&#x91;×¨×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;09&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00202 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002020000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;05-00202&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.02 /assets/img/bag-money.svg" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${front-end-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/assets/img/bag-money.svg</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00220 0000043&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:500220,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9b;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;123456&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:15,&quot;shemSade&quot;:&quot;×&#x99;×¦×¨×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;×&#x9c;×&#x9e;×&#x91;×&#x95;×¨×&#x92;×&#x99;× ×&#x99;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:46,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×&#x95;× ×&#x94; ×&#x9e;×¡×¤×¨ ×&#x9b;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:3},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:3,&quot;mSeif&quot;:500220,&quot;mSeifSecondary&quot;:702100,&quot;mShurotHakrana&quot;:4,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00220 0000043&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x99;×&#x90;×&#x95;×¨ ×&#x9b;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91; ×&#x94;×&#x9e;×&#x95;×&#x91;×&#x99;×&#x9c;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;04&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;× ×&#x90; ×&#x94;×§×© ×&#x9e;×¡×¤×¨ ×&#x9b;×&#x9c;×&#x99; ×¨×&#x9b;×&#x91; [610]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;05-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15. Enter car descreption" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00202 0000090&quot;,&quot;headLineSB&quot;:50000,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0.5,&quot;headLinePremium&quot;:250,&quot;lines&quot;:null,&quot;mSeif&quot;:500202,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:12,&quot;mSeif&quot;:500202,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:9,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00202 0000090&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x97;×&#x95;×¨×&#x94; ×&#x91;×&#x94;×¢×&#x91;×¨×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;09&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00202 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002020000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00220 0000043&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:500220,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:3,&quot;mSeif&quot;:500220,&quot;mSeifSecondary&quot;:500220,&quot;mShurotHakrana&quot;:4,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00220 0000043&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x99;×&#x90;×&#x95;×¨ ×&#x9b;×&#x9c;×&#x99; ×&#x94;×¨×&#x9b;×&#x91; ×&#x94;×&#x9e;×&#x95;×&#x91;×&#x99;×&#x9c;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;04&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;× ×&#x90; ×&#x94;×§×© ×&#x9e;×¡×¤×¨ ×&#x9b;×&#x9c;×&#x99; ×¨×&#x9b;×&#x91; [610]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;05-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16. Accidents" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;05-00230 0000013&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:500230,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30728,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:1,&quot;mSdotKeletBeseif&quot;:2,&quot;mSeif&quot;:500230,&quot;mSeifSecondary&quot;:702100,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;05-00230 0000013&quot;,&quot;shemSeif&quot;:&quot;.&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;05&quot;,&quot;mRSSeif&quot;:&quot;00230 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:5002300000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:null,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;05-00230&quot;,&quot;cardIsCollapsed&quot;:true,&quot;action&quot;:1}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;06-00100 0000103&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:600100,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:20,&quot;mSeif&quot;:600100,&quot;mSeifSecondary&quot;:600100,&quot;mShurotHakrana&quot;:10,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;06-00100 0000103&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x90;×&#x95;× ×&#x95;×ª ×&#x90;×&#x99;×©×&#x99;×&#x95;×ª - ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;10&quot;,&quot;mRSPerek&quot;:&quot;06&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:6001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;06-00100&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.03 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.04 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.05 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;06-00100 0000103&quot;,&quot;headLineSB&quot;:250000,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:600100,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:32,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;×©×&#x9c;×&#x95;×&#x9d;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¤×&#x99;×¦×&#x95;×&#x99; ×©×&#x91;×&#x95;×¢×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×&#x9c;×&#x99;×&#x93;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;01011950&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:138,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:30,&quot;shemSade&quot;:&quot;×&#x9e;×§×¦×&#x95;×¢&quot;,&quot;tochenSade&quot;:&quot;138&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¨×&#x9e;×ª ×¡×&#x99;×&#x9b;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x97;×&#x9c;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x92;×&#x9c;×&#x92;×&#x9c;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x98;×&#x95;×&#x97; ×&#x9e;×©× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:33,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×&#x94;×&#x92;×&#x93;×&#x9c;×ª ×&#x9e;×&#x99;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:39,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x95;×&#x9f; ×§×&#x95;×&#x93;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x95;×&#x9f; ×&#x98;×&#x99;×§×&#x95;×¦×§×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x92;×&#x99;×&#x9c; ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:19,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x99;×&#x9c;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94; ×&#x9c;×&#x99;×&#x9c;×&#x93;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:18,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×©×&#x99;× ×&#x95;×&#x99; ×¤×¨×&#x9e;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:17,&quot;mshuraBeseif&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:45,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x94;×©×&#x95;×&#x95;×&#x90;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:20,&quot;mshuraBeseif&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:42,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:1,&quot;shemSade&quot;:&quot;×&#x9e;×§×¦×&#x95;×¢ 3500&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:10},{},{},{},{},{},{&quot;tochenSade&quot;:250000},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:20,&quot;mSeif&quot;:600100,&quot;mSeifSecondary&quot;:702100,&quot;mShurotHakrana&quot;:10,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:250000,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;06-00100 0000103&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x90;×&#x95;× ×&#x95;×ª ×&#x90;×&#x99;×©×&#x99;×&#x95;×ª - ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;×&#x99;×&#x9d;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;10&quot;,&quot;mRSPerek&quot;:&quot;06&quot;,&quot;mRSSeif&quot;:&quot;00100 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:6001000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;06-00100&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.06 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;06-00104 0000012&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:600104,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:2,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:600104,&quot;mSeifSecondary&quot;:600104,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;06-00104 0000012&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x95;×¡×¤×ª ×&#x92;×&#x99;×&#x9c; ×&#x92;×&#x91;×&#x95;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;06&quot;,&quot;mRSSeif&quot;:&quot;00104 00&quot;,&quot;mRSSeifChadash&quot;:&quot;2&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:6001040000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;06-00104&quot;,&quot;cardIsCollapsed&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17. Summary" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;06-00104 0000012&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:600104,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:2,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:600104,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:1,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;06-00104 0000012&quot;,&quot;shemSeif&quot;:&quot;×ª×&#x95;×¡×¤×ª ×&#x92;×&#x99;×&#x9c; ×&#x92;×&#x91;×&#x95;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;01&quot;,&quot;mRSPerek&quot;:&quot;06&quot;,&quot;mRSSeif&quot;:&quot;00104 00&quot;,&quot;mRSSeifChadash&quot;:&quot;2&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:6001040000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;melelRoshSeifStr&quot;:&quot;06-00104&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:7021000000},{&quot;clause&quot;:7023000000},{&quot;clause&quot;:7024000000},{&quot;clause&quot;:7024500000},{&quot;clause&quot;:7025000000},{&quot;clause&quot;:7025010000},{&quot;clause&quot;:7025020000},{&quot;clause&quot;:7026000000},{&quot;clause&quot;:10009000000},{&quot;clause&quot;:10009800000},{&quot;clause&quot;:10009900000},{&quot;clause&quot;:10009950000},{&quot;clause&quot;:10009950001},{&quot;clause&quot;:10010000000},{&quot;clause&quot;:10010010000},{&quot;clause&quot;:99010000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.02 /api/financial-summary/initialize-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="insuredId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insuredId</stringProp>
                  <stringProp name="Argument.value">62362835</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">40800354119700</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchCode</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTchila" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTchila</stringProp>
                  <stringProp name="Argument.value">20200501</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTom</stringProp>
                  <stringProp name="Argument.value">20200831</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/financial-summary/initialize-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.03 /api/credit-card/get-credit-card-fee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="premiumBruto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumBruto</stringProp>
                  <stringProp name="Argument.value">2458</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="premiumNeto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumNeto</stringProp>
                  <stringProp name="Argument.value">1695</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="paymentsNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">paymentsNumber</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maslulAshrai" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">maslulAshrai</stringProp>
                  <stringProp name="Argument.value">4%D7%9E</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/credit-card/get-credit-card-fee</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>0.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 4 - HTTP" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Data Set Config" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="filename">D:/LoadTest/Hafaka/data/rishui.txt</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="variableNames">rishui,year</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="01. Login (Execute Once)" enabled="true">
          <stringProp name="TestPlan.comments">k90fis1   ~    fis1</stringProp>
        </OnceOnlyController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01. Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01 /api/authentication/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;oauthFragment&quot;:&quot;ext_target=sys&amp;user=k90fis1&amp;passwd=ZmlzMQ==&quot;,&quot;mode&quot;:&quot;man&quot;,&quot;uniqueVisitId&quot;:&quot;v-clczrrecxuupsx42755i&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/authentication/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}/authentication?allowReturn=true&amp;mode=man</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02 /api/application-scm-info/get-all-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-scm-info/get-all-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03 /api/application-properties/get-environment" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-properties/get-environment</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="( new policy extractor ) " enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/policy-messages/get-policy-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">33</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/policy-messages/get-policy-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/api/finish/execute-finish-procedures? ( new policy ) " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;sendPol&quot;:{&quot;ishurChidush&quot;:1,&quot;targetPrintoutCode&quot;:0,&quot;codeHakpaa&quot;:0,&quot;codeHadpasa&quot;:2,&quot;hadpasaMelea&quot;:1,&quot;kaskoChova&quot;:3,&quot;mOtakim&quot;:0,&quot;forcePolNumber&quot;:&quot;0000000000000&quot;,&quot;payTeudatChova&quot;:1,&quot;footer&quot;:&quot;CSE.21163017&quot;,&quot;kodChazara&quot;:0,&quot;kodPeula&quot;:1,&quot;mpnia&quot;:0}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finish/execute-finish-procedures?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="_newPol" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">_newPol</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;newPol&quot;:&quot;(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NULL</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="_newPol is NULL" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2407815">NULL</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">12</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">_newPol</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prev.setDataEncoding(&quot;Windows-1255&quot;)</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Scenario 5 - HTTP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">---&gt;&gt;&gt;  Origin: ${front-end-int}  Referer: ${referer-int}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="01. Login (Execute Once)" enabled="true">
          <stringProp name="TestPlan.comments">k90fis1   ~    fis1</stringProp>
        </OnceOnlyController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01. Login" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.01 /api/authentication/auth" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;oauthFragment&quot;:&quot;ext_target=sys&amp;user=k90fis1&amp;passwd=ZmlzMQ==&quot;,&quot;mode&quot;:&quot;man&quot;,&quot;uniqueVisitId&quot;:&quot;v-clczrrecxuupsx42755i&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/authentication/auth</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}/authentication?allowReturn=true&amp;mode=man</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.02 /api/application-scm-info/get-all-info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-scm-info/get-all-info</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="01.03 /api/application-properties/get-environment" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/api/application-properties/get-environment</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02. Form &amp; Actions" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.01 /api/title/action-code-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/action-code-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.02 /api/title/get-branch-change-procedures" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/title/get-branch-change-procedures</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.03 /api/main/set-code-peula-new" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/set-code-peula-new</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.04 /api/main-queries/get-details-from-t5200-anafim" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main-queries/get-details-from-t5200-anafim</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.05 /api/finance-business/get-max-payments-number" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toDate</stringProp>
                  <stringProp name="Argument.value">20210630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finance-business/get-max-payments-number</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.06 /api/agents/get-agent-details-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ifRenewCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ifRenewCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agentNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agentNo</stringProp>
                  <stringProp name="Argument.value">509067</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                  <stringProp name="Argument.value">20210630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/agents/get-agent-details-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/title</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="02.07 /api/underwriting/get-personal-details-initial" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is-vehicle-branch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is-vehicle-branch</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">form-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policy-no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policy-no</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branch-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branch-code</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">509067</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/get-personal-details-initial</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03. New customer" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.01 /api/main/set-code-peula-new" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/set-code-peula-new</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${referer-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.02 /api/underwriting/get-personal-details-initial" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="is-vehicle-branch" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">is-vehicle-branch</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="form-type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">form-type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policy-no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policy-no</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branch-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branch-code</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="agent-id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">agent-id</stringProp>
                  <stringProp name="Argument.value">509067</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/underwriting/get-personal-details-initial</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.03 /api/main/get-zip-code" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="screen-action-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screen-action-code</stringProp>
                  <stringProp name="Argument.value">60</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="action-code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">action-code</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="street" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">street</stringProp>
                  <stringProp name="Argument.value">%D7%93%D7%9F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="city" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">city</stringProp>
                  <stringProp name="Argument.value">%D7%93%D7%9F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/get-zip-code</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="03.04 /api/main/update-lakoach" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lakoach&quot;:{&quot;codePeula&quot;:1,&quot;mLakoach&quot;:6833602,&quot;soog&quot;:1,&quot;shemLakoach&quot;:&quot;×&#x90;×&#x90;×&#x90;&quot;,&quot;shemMishpacha&quot;:&quot;×&#x92;×&#x92;×&#x92;&quot;,&quot;shemAnglit&quot;:&quot;&quot;,&quot;ktovet&quot;:&quot;×&#x93;×&#x9f;&quot;,&quot;misparBayit&quot;:&quot;×&#x93;×&#x9f;&quot;,&quot;ishuv&quot;:&quot;×&#x93;×&#x9f;&quot;,&quot;mikud&quot;:1224500,&quot;tel&quot;:&quot;&quot;,&quot;cellTel&quot;:&quot;0544987897&quot;,&quot;trLeida&quot;:0,&quot;trRishui&quot;:0,&quot;msLakuahSochen&quot;:5555}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/update-lakoach</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/personal-details</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="04. Get clauses ( first )" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="04.01 /api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0200&quot;:{&quot;trTchila&quot;:20200701,&quot;trTom&quot;:20210630,&quot;tkufatBit&quot;:365,&quot;mPolisa&quot;:0,&quot;codePeula&quot;:&quot;1&quot;,&quot;mAnaf&quot;:22,&quot;kaskoChova&quot;:0,&quot;mTashlumim&quot;:10,&quot;mSochen&quot;:509067,&quot;codeHazmada&quot;:71,&quot;ofenGvia&quot;:&quot;1&quot;,&quot;ofenGviaDesc&quot;:&quot;×&#x94;×&#x95;×¨×&#x90;×ª ×§×&#x91;×¢&quot;,&quot;sugChiuv&quot;:0,&quot;codeSikun&quot;:1,&quot;nPolDira&quot;:&quot;&quot;,&quot;mMevutach&quot;:&quot;6833602&quot;,&quot;shemMevutach&quot;:&quot;×&#x90;×&#x90;×&#x90;&quot;,&quot;shemMishpacha&quot;:&quot;×&#x92;×&#x92;×&#x92;&quot;,&quot;ktovet&quot;:&quot;×&#x93;×&#x9f;&quot;,&quot;ishuv&quot;:&quot;×&#x93;×&#x9f;&quot;,&quot;mikud&quot;:1224500,&quot;tel&quot;:&quot;&quot;,&quot;cellTel&quot;:&quot;0544987897&quot;,&quot;szEMail&quot;:null,&quot;soog&quot;:1,&quot;msLakuahSochen&quot;:5555,&quot;mHeskemBriut&quot;:null,&quot;shemAnglit&quot;:null,&quot;sochenSochnut&quot;:1,&quot;goremKefel&quot;:1,&quot;shinuiHosafa&quot;:0,&quot;shinuiHachsara&quot;:0,&quot;codePeulaMasach&quot;:40},&quot;eltr0300ActionCode&quot;:3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses-aggregate/get-all-clauses-by-action-code-aggregated?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="05. Section 01-00050" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00050 0000071&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100050,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:6,&quot;mSeif&quot;:100050,&quot;mSeifSecondary&quot;:100050,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00050 0000071&quot;,&quot;shemSeif&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×&#x9e;×&#x9c;×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00050 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000500000,&quot;mText&quot;:0,&quot;msg&quot;:null,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:null,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:null,&quot;freeText&quot;:null,&quot;firstTime&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00050&quot;,&quot;cardIsCollapsed&quot;:false}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000600000},{&quot;clause&quot;:1000850000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="05.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00050 0000072&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;0&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100050,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:11,&quot;shemSade&quot;:&quot;×ª×&#x96;/×&#x97;.×¤ × ×&#x94;×&#x92; ×¨×&#x90;×©×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;6833602&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×¤×¨×&#x98;×&#x99; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×¨×&#x90;×©×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;×&#x90;×&#x90;×&#x90;&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x9e;×©×¤×&#x97;×&#x94; ×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;×&#x92;×&#x92;×&#x92;&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:11,&quot;shemSade&quot;:&quot;×ª×&#x96; × ×&#x94;×&#x92; ×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:6,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x9e;×©×¤×&#x97;×&#x94; × ×&#x94;×&#x92; ×©× ×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:8},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:1,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:6,&quot;mSeif&quot;:100050,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00050 0000072&quot;,&quot;shemSeif&quot;:&quot;×©×&#x9d; ×&#x94;×&#x9e;×&#x91;×&#x95;×&#x98;×&#x97; ×&#x94;×&#x9e;×&#x9c;×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00050 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000500000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:null,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;firstTime&quot;:false,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00050&quot;,&quot;cardIsCollapsed&quot;:false,&quot;action&quot;:2,&quot;firstUncollapse&quot;:true}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000600000},{&quot;clause&quot;:1000850000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="06. Section 01-00085" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100085,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:1,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:10,&quot;mSeif&quot;:100085,&quot;mSeifSecondary&quot;:100085,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00085 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000850000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x99;×© ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×&#x90;×ª ×&#x9e;×¡&apos; ×&#x94;×§×&#x95;×&#x9e;×&#x94; [596]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00085&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.02 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">85</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">125</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="06.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100085,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:36,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:13,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x9b;×&#x99;×¡×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:2,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:4,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:115,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:26,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x93;×&#x99;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:40,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:27,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x9e;×ª×&#x95;×&#x9a;&quot;,&quot;tochenSade&quot;:&quot;4&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×©×&#x98;×&#x97; ×&#x94;×&#x93;×&#x99;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;50&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:13},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:3,&quot;sadeSize&quot;:9,&quot;shemSade&quot;:&quot;×ª×&#x90;×¨×&#x99;×&#x9a; ×&#x91;×&#x99;×¦×&#x95;×¢ ×¡×§×¨&quot;,&quot;tochenSade&quot;:&quot;01012020&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;2&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:125,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:31,&quot;shemSade&quot;:&quot;×©×&#x9d; ×&#x94;×¡×&#x95;×§×¨&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;mshuraBeseif&quot;:6,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:45,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:4,&quot;shemSade&quot;:&quot;×&#x99;×&#x9e;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:6},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:10,&quot;mSeif&quot;:100085,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:7,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00085 0000073&quot;,&quot;shemSeif&quot;:&quot;×¡×&#x95;×&#x92; ×&#x94;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;07&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00085 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000850000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00085&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="07. Section 01-00090" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100090,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100090,&quot;mSeifSecondary&quot;:100090,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x94;×¨×&#x97;×&#x91;×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00090 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000900000,&quot;mText&quot;:0,&quot;msg&quot;:&quot; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x91;× ×&#x94; ×&#x97;×&#x95;×©×&#x91; ×¤×&#x97;×&#x95;×ª ×&#x9e;-5,000 ×©\&quot;×&#x97; ×&#x9c;×&#x9e;\&quot;×¨  [660]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00090&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100090,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;500000&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:117,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94; ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:6,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:116,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:17,&quot;shemSade&quot;:&quot;×¦× ×¨×ª&quot;,&quot;tochenSade&quot;:&quot;6&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:19},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x95;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:20},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:42,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x98;×¨×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x9e;×¤×&#x95;×¦×&#x9c;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:17},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×¡&apos; ×&#x99;×&#x97;×&#x93;×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:18},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:13},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x92;×&#x92; ×&#x99;×&#x91;×©&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x91;×&#x9c;×ª×&#x99; ×&#x9e;×&#x99;×&#x95;×©×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:6,&quot;msade&quot;:21},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:22},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:8,&quot;msade&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x97;×¡×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:9,&quot;msade&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9c;×&#x99;×&#x9d; ×¡× ×&#x98;×¨×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:10,&quot;msade&quot;:24},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91;-×&#x93;×&#x99;×&#x99;×¨ ×&#x9e;×©× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:25},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×&#x9c;×&#x90; ×&#x9e;×¡×&#x9b;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:44,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:1,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x94;\&quot;×¡ ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:14},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×©×&#x99;× ×&#x95;×&#x99; ×¡×¤×§ ×¦× ×¨×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:15},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100090,&quot;mSeifSecondary&quot;:0,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x94;×¨×&#x97;×&#x91;×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00090 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000900000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00090&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:3}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="07.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100090,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:28,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:10,&quot;shemSade&quot;:&quot;×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;500000&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:117,&quot;colorSade&quot;:0,&quot;columnSade&quot;:6,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94; ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:10},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:6,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:116,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:17,&quot;shemSade&quot;:&quot;×¦× ×¨×ª&quot;,&quot;tochenSade&quot;:&quot;6&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:32,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×¡×¤×¨ ×&#x9e;×&#x91;× ×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:19},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:18,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x95;×&#x93;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:20},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:42,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x98;×¨×&#x95;×¨&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x9e;×¤×&#x95;×¦×&#x9c;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:17},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9e;×¡&apos; ×&#x99;×&#x97;×&#x93;×&#x99;×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:18},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:13},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:23,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x92;×&#x92; ×&#x99;×&#x91;×©&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x91;×&#x9c;×ª×&#x99; ×&#x9e;×&#x99;×&#x95;×©×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:6,&quot;msade&quot;:21},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:22},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:8,&quot;msade&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x97;×¡×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:9,&quot;msade&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:21,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9c;×&#x99;×&#x9d; ×¡× ×&#x98;×¨×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:10,&quot;msade&quot;:24},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91;-×&#x93;×&#x99;×&#x99;×¨ ×&#x9e;×©× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:25},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:47,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×&#x9c;×&#x90; ×&#x9e;×¡×&#x9b;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:44,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:1,&quot;shemSade&quot;:&quot;×¤× ×&#x95;×&#x99;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:15,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9b;×&#x94;\&quot;×¡ ×&#x9e;×&#x91;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:14},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×§×&#x95;×&#x93; ×©×&#x99;× ×&#x95;×&#x99; ×¡×¤×§ ×¦× ×¨×ª&quot;,&quot;tochenSade&quot;:&quot;6&quot;,&quot;mshuraBeseif&quot;:12,&quot;msade&quot;:15},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:23,&quot;mSeif&quot;:100090,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:12,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00090 0000123&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x9e;×&#x91;× ×&#x94; ×&#x9b;×&#x95;×&#x9c;×&#x9c; ×&#x94;×¨×&#x97;×&#x91;×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;12&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00090 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1000900000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00090&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1000950000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="08. Section 01-00109" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000080&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100109,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:14,&quot;mSeif&quot;:100109,&quot;mSeifSecondary&quot;:100109,&quot;mShurotHakrana&quot;:8,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000080&quot;,&quot;shemSeif&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;08&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00109 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001090000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;firstTime&quot;:true,&quot;firstUncollapse&quot;:null,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00109&quot;,&quot;status&quot;:&quot;×§&quot;}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1002000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="08.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000083&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;1&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100109,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:9,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:132,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×¨×&#x90;×©×&#x95;× ×&#x94;&quot;,&quot;tochenSade&quot;:&quot;9&quot;,&quot;msade&quot;:2,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×ª×&#x91;×&#x99;×¢×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:9,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:132,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×©× ×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;9&quot;,&quot;msade&quot;:5,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×©× ×&#x94; ×©× ×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:9,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:132,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×©× ×&#x94; ×©×&#x9c;×&#x99;×©×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;9&quot;,&quot;msade&quot;:6,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:2,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×©× ×&#x94; ×©×&#x9c;×&#x99;×©×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x90;×&#x9e;×&#x99;×ª×&#x99; ×&#x9e;× ×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:9,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:8,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×&#x9e;× ×&#x95;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:10,&quot;mshuraBeseif&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:30,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x97;×&#x91;×¨×&#x94; ×&#x90;×&#x97;×¨×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:12,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:7,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×ª×&#x91;×&#x99;×¢×&#x95;×ª ×&#x91;×&#x97;×&#x91;×¨×&#x94; ×&#x90;×&#x97;×¨×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:13,&quot;mshuraBeseif&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x94;×&#x9b; ×&#x95;×&#x95;×ª×§&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:15,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¡×&#x94;,×&#x9b; ×ª×&#x91;×&#x99;×¢×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:16,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×¨×&#x92;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:11,&quot;mshuraBeseif&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 1&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;msade&quot;:14,&quot;mshuraBeseif&quot;:8},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:0,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:14,&quot;mSeif&quot;:100109,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:8,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00109 0000083&quot;,&quot;shemSeif&quot;:&quot;×&#x95;×&#x95;×ª×§ ×&#x91;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;08&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00109 00&quot;,&quot;mRSSeifChadash&quot;:&quot;0&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1001090000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00109&quot;,&quot;status&quot;:&quot;×§&quot;,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[{&quot;clause&quot;:1002000000}]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="09. Section 01-00200" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00200 0000111&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100200,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:21,&quot;mSeif&quot;:100200,&quot;mSeifSecondary&quot;:100200,&quot;mShurotHakrana&quot;:11,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00200 0000111&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×§ ×&#x94;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;11&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00200 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1002000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x90;× ×&#x90; ×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94; [604]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00200&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="09.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:100200,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;250000&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¨.×&#x90;×&#x93;×&#x9e;×&#x94; ×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:11},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:13,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:126,&quot;colorSade&quot;:0,&quot;columnSade&quot;:25,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×¡×&#x94;\&quot;×&#x9b;&quot;,&quot;tochenSade&quot;:&quot;13&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:15},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×ª×&#x9b;×©×&#x99;×&#x98;×&#x99;×&#x9d; ×&#x91;×&#x9b;×&#x94;\&quot;×¡&quot;,&quot;tochenSade&quot;:&quot;${delay_min}&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:1,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:2,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9e;×ª×&#x95;×&#x9b;×&#x9d; ×&#x9b;×&#x94;\&quot;×¡&quot;,&quot;tochenSade&quot;:&quot;${delay_min}&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x98;×&#x9c;×&#x95;×&#x99;×&#x96;×&#x99;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:17},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:20,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:4,&quot;msade&quot;:8},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x9e;× ×&#x94;×&#x9c;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:19},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:4,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x99;×&#x92;×&#x95;×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:5,&quot;msade&quot;:24},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:1,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:11,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:18,&quot;shemSade&quot;:&quot;×&#x94;× ×&#x97;×ª ×&#x94;×©×ª×ª×¤×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:6,&quot;msade&quot;:12},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:29,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x93;×&#x99;×¨×&#x94; ×&#x91;×&#x9c;×ª×&#x99; ×&#x9e;×&#x99;×&#x95;×©×&#x91;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:6},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:14,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x97;×©×&#x91; × ×&#x99;×©×&#x90;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;mshuraBeseif&quot;:7,&quot;msade&quot;:9},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:37,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9c;×&#x9c; ×&#x97;×&#x95;×¤×©×&#x99;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:8,&quot;msade&quot;:21},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:13,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;× ×&#x96;×§ ×&#x9e;×&#x99;×&#x9d; ×&#x9c;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:8,&quot;msade&quot;:22},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:34,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x90;×&#x95;×¡×¤×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:9,&quot;msade&quot;:23},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x9c; ×©×&#x99;×&#x91;×&#x95;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:9,&quot;msade&quot;:20},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:24,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:5,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×©×&#x91;×¨ ×&#x96;×&#x9b;×&#x95;×&#x9b;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;0&quot;,&quot;mshuraBeseif&quot;:10,&quot;msade&quot;:7},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:43,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¡×&#x95;×&#x9b;×&#x9f; ×§×&#x95;×&#x9c;×§×&#x98;×&#x99;×&#x91;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:38,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x90;×&#x95;×&#x92;×¨ 6&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:18},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:9,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:1,&quot;colorSade&quot;:0,&quot;columnSade&quot;:17,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:19,&quot;shemSade&quot;:&quot;×¤×&#x9c; ×&#x93;×&#x90;×©&quot;,&quot;tochenSade&quot;:&quot;9&quot;,&quot;mshuraBeseif&quot;:11,&quot;msade&quot;:16},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:0,&quot;codeHakranatPremia&quot;:0,&quot;codeHakranatSchumBituach&quot;:0,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:21,&quot;mSeif&quot;:100200,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:11,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;01-00200 0000113&quot;,&quot;shemSeif&quot;:&quot;×¤×¨×§ ×&#x94;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;11&quot;,&quot;mRSPerek&quot;:&quot;01&quot;,&quot;mRSSeif&quot;:&quot;00200 00&quot;,&quot;mRSSeifChadash&quot;:&quot;1&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:1002000000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;01-00200&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10. Section 02-00220" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200220,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200220,&quot;mSeifSecondary&quot;:200220,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="10.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;headLineSB&quot;:&quot;950000&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200220,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;950000&quot;},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200220,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00220 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00220 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00220&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11. Section 02-00280" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00280 0000033&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200280,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:2,&quot;mSeif&quot;:200280,&quot;mSeifSecondary&quot;:200280,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00280 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x97;×¡×&#x9f;,×&#x91;×¨×&#x99;×&#x9b;×&#x94; ×©×&#x97;×&#x99;×&#x99;×&#x94;,×&#x92;×&#x99;× ×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00280 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002800000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00280&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.02 /api/clauses/get-field-descriptions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="chapterNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">chapterNo</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="clauseNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">clauseNo</stringProp>
                  <stringProp name="Argument.value">280</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fieldNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fieldNo</stringProp>
                  <stringProp name="Argument.value">124</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromDate</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-field-descriptions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="11.03 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00280 0000033&quot;,&quot;headLineSB&quot;:&quot;50000&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0.04,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200280,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:&quot;1&quot;,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:124,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:13,&quot;shemSade&quot;:&quot;×&#x9e;×&#x97;×¡×&#x9f;&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:7,&quot;mshuraBeseif&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:5,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:37,&quot;shemSade&quot;:&quot;×&#x94;×&#x92;× ×&#x95;×ª&quot;,&quot;tochenSade&quot;:&quot;1&quot;,&quot;msade&quot;:8,&quot;mshuraBeseif&quot;:3},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;50000&quot;},{&quot;tochenSade&quot;:0.04},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:2,&quot;mSeif&quot;:200280,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00280 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×&#x97;×¡×&#x9f;,×&#x91;×¨×&#x99;×&#x9b;×&#x94; ×©×&#x97;×&#x99;×&#x99;×&#x94;,×&#x92;×&#x99;× ×&#x95;×ª&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00280 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002800000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00280&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="12. Section 02-00291" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="12.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200291,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:41,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;JKUI&quot;,&quot;tochenSade&quot;:&quot;950000&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:2},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:3,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:2,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200291,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00291 0000022&quot;,&quot;shemSeif&quot;:&quot;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¡×&#x9b;×&#x95;×&#x9d; × ×&#x95;×¡×£ ×&#x9c;×¨×¢×&#x99;×&#x93;×ª ×&#x90;×&#x93;×&#x9e;×&#x94;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00291 00&quot;,&quot;mRSSeifChadash&quot;:&quot;2&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2002910000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00291&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="13. Section 02-00310" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200310,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200310,&quot;mSeifSecondary&quot;:200310,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×ª ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×ª×§×&#x9f; ×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00310 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2003100000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00310&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="13.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;headLineSB&quot;:&quot;50000&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0.035,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200310,&quot;netuneySade&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;50000&quot;},{&quot;tochenSade&quot;:0.035},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:0,&quot;mSeif&quot;:200310,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:2,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00310 0000023&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×ª ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×ª×§×&#x9f; ×¤×&#x95;×&#x98;×&#x95; ×&#x95;×&#x95;×&#x9c;×&#x98;×&#x90;×&#x99;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;02&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00310 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2003100000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00310&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="14. Section 02-00406" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00406 0000033&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200406,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200406,&quot;mSeifSecondary&quot;:200406,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00406 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×©×&#x91;×¨ ×ª×&#x90;×&#x95;× ×ª×&#x99; -×&#x98;×&#x9c;×&#x95;×&#x99;×&#x96;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00406 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2004060000,&quot;mText&quot;:0,&quot;msg&quot;:&quot; × ×&#x90; ×&#x94;×§×© ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×¢×&#x9c; 15,000×©\&quot;×&#x97; [731]&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00406&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="14.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-00406 0000033&quot;,&quot;headLineSB&quot;:&quot;20000&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:4,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:200406,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:33,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x98;×&#x9c;×&#x95;×&#x99;×&#x96;×&#x99;×&#x94; ×&#x97;×&#x99;× ×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;15000&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:2},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;20000&quot;},{&quot;tochenSade&quot;:4},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:1,&quot;mSeif&quot;:200406,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-00406 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×©×&#x91;×¨ ×ª×&#x90;×&#x95;× ×ª×&#x99; -×&#x98;×&#x9c;×&#x95;×&#x99;×&#x96;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;00406 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2004060000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-00406&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="15. Section 02-01950" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-01950 0000033&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:201950,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:6,&quot;mSeif&quot;:201950,&quot;mSeifSecondary&quot;:201950,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-01950 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;/×&#x9e;×&#x9b;×¡×&#x97;×ª ×&#x93;×©×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;01950 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2019500000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-01950&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="15.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;02-01950 0000033&quot;,&quot;headLineSB&quot;:&quot;${delay_max}&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:6.5,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:201950,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:12,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:6,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x94;×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;3000&quot;,&quot;mshuraBeseif&quot;:1,&quot;msade&quot;:5},{&quot;border&quot;:0,&quot;codeBdikot&quot;:1,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:9,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:35,&quot;shemSade&quot;:&quot;N&quot;,&quot;tochenSade&quot;:&quot;× ×&#x95;×¦×¥&quot;,&quot;mshuraBeseif&quot;:2,&quot;msade&quot;:1},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:46,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:3,&quot;shemSade&quot;:&quot;×&#x9b;×&#x9e;×&#x95;×ª ×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:36,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:7,&quot;shemSade&quot;:&quot;×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×&#x9e;×¦×&#x98;×&#x91;×¨&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:26,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:8,&quot;shemSade&quot;:&quot;×&#x9e;×§×¡×&#x99;×&#x9e;×&#x95;×&#x9d; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;tochenSade&quot;:&quot;15000&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:2},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:22,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:2,&quot;shemSade&quot;:&quot;×¢×&#x96;×¨×&#x94;&quot;,&quot;tochenSade&quot;:&quot;&quot;,&quot;mshuraBeseif&quot;:3,&quot;msade&quot;:6},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;${delay_max}&quot;},{&quot;tochenSade&quot;:6.5},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:6,&quot;mSeif&quot;:201950,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:3,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;02-01950 0000033&quot;,&quot;shemSeif&quot;:&quot;×&#x9b;×&#x99;×¡×&#x95;×&#x99; ×&#x90;×&#x95;×¤× ×&#x99;×&#x99;×&#x9d;/×&#x9e;×&#x9b;×¡×&#x97;×ª ×&#x93;×©×&#x90;&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;03&quot;,&quot;mRSPerek&quot;:&quot;02&quot;,&quot;mRSSeif&quot;:&quot;01950 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:2019500000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;02-01950&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="16. Section 03-00520" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.01 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00520 0000063&quot;,&quot;headLineSB&quot;:0,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:0,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300520,&quot;netuneySade&quot;:null,&quot;seifData&quot;:{&quot;codePeula&quot;:30727,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:0,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:3,&quot;mSeif&quot;:300520,&quot;mSeifSecondary&quot;:300520,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00520 0000063&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¦×&#x99;×&#x95;×&#x93; ×&#x90;×&#x9c;×§×&#x98;×¨×&#x95;× ×&#x99; ×&#x95;×&#x9e;×¢&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00520 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3005200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;×&#x97;×&#x95;×&#x91;×&#x94; ×&#x9c;×&#x9e;×&#x9c;×&#x90; ×¡×&#x9b;×&#x95;×&#x9d; ×&#x91;×&#x99;×&#x98;×&#x95;×&#x97;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:0,&quot;codeError&quot;:1,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;03-00520&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="16.02 /api/clauses/get-by-code-peula-from-elt0300" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0300&quot;:{&quot;clauses&quot;:[{&quot;active&quot;:1,&quot;melelRoshSeif&quot;:&quot;03-00520 0000063&quot;,&quot;headLineSB&quot;:&quot;${delay_max}&quot;,&quot;headLineSttsSeif&quot;:&quot;2&quot;,&quot;headLineMiun&quot;:5.5,&quot;headLinePremium&quot;:0,&quot;lines&quot;:null,&quot;mSeif&quot;:300520,&quot;netuneySade&quot;:[{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:2,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:122,&quot;colorSade&quot;:0,&quot;columnSade&quot;:35,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:14,&quot;shemSade&quot;:&quot;×ª×&#x9b;×&#x95;×&#x9c;×&#x94;&quot;,&quot;tochenSade&quot;:&quot;2&quot;,&quot;msade&quot;:4,&quot;mshuraBeseif&quot;:3},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:0,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:10,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:4,&quot;sadeSize&quot;:27,&quot;shemSade&quot;:&quot;×&#x9e;×&#x9e;&quot;,&quot;tochenSade&quot;:&quot;×&#x9c;×&#x90; ×&#x9e;×©× ×&#x94;&quot;,&quot;msade&quot;:1,&quot;mshuraBeseif&quot;:4},{&quot;border&quot;:0,&quot;codeBdikot&quot;:0,&quot;codeLePianuach&quot;:0,&quot;codePeletBilvad&quot;:1,&quot;codePianuach&quot;:0,&quot;colorSade&quot;:0,&quot;columnSade&quot;:19,&quot;filler&quot;:0,&quot;help&quot;:&quot;&quot;,&quot;ofiSade&quot;:1,&quot;sadeSize&quot;:5,&quot;shemSade&quot;:&quot;×&#x94;×©×ª×ª×¤×&#x95;×ª ×¢×¦×&#x9e;×&#x99;×ª&quot;,&quot;tochenSade&quot;:&quot;750&quot;,&quot;msade&quot;:3,&quot;mshuraBeseif&quot;:5},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{&quot;tochenSade&quot;:&quot;${delay_max}&quot;},{&quot;tochenSade&quot;:5.5},{&quot;tochenSade&quot;:0}],&quot;seifData&quot;:{&quot;codePeula&quot;:30726,&quot;adTrBit&quot;:0,&quot;codeBdikotMiun&quot;:0,&quot;codeBdikotPremia&quot;:0,&quot;codeBdikotSchumBituach&quot;:0,&quot;codeFreeTextModified&quot;:0,&quot;codeHakranatMiun&quot;:1,&quot;codeHakranatPremia&quot;:1,&quot;codeHakranatSchumBituach&quot;:2,&quot;codeSecondary&quot;:8,&quot;codeSeifChadash&quot;:3,&quot;codeSeifimLebitul&quot;:0,&quot;codeseifautoControled&quot;:0,&quot;mSdotKeletBeseif&quot;:3,&quot;mSeif&quot;:300520,&quot;mSeifSecondary&quot;:9999999,&quot;mShurotHakrana&quot;:6,&quot;mText&quot;:0,&quot;mTextSecondary&quot;:0,&quot;miun&quot;:0,&quot;premia&quot;:0,&quot;schumBituach&quot;:0,&quot;siduri&quot;:0,&quot;siduriSecondary&quot;:0,&quot;soundFlag&quot;:0,&quot;melelRoshSeif&quot;:&quot;03-00520 0000063&quot;,&quot;shemSeif&quot;:&quot;×&#x94;×¨×&#x97;×&#x91;×&#x94; ×&#x9c;×&#x91;×&#x99;×&#x98;×&#x95;×&#x97; ×¦×&#x99;×&#x95;×&#x93; ×&#x90;×&#x9c;×§×&#x98;×¨×&#x95;× ×&#x99; ×&#x95;×&#x9e;×¢&quot;},&quot;siduri&quot;:0,&quot;mRSFreeText&quot;:&quot;00&quot;,&quot;mRSMShurot&quot;:&quot;06&quot;,&quot;mRSPerek&quot;:&quot;03&quot;,&quot;mRSSeif&quot;:&quot;00520 00&quot;,&quot;mRSSeifChadash&quot;:&quot;3&quot;,&quot;mRSSiduri&quot;:&quot;00&quot;,&quot;seifKey&quot;:3005200000,&quot;mText&quot;:0,&quot;msg&quot;:&quot;&quot;,&quot;code&quot;:null,&quot;codeConfirmation&quot;:0,&quot;codeWarnings&quot;:0,&quot;isSeifOpen&quot;:1,&quot;codeError&quot;:0,&quot;freeText&quot;:null,&quot;cardIsCollapsed&quot;:false,&quot;lastWithError&quot;:true,&quot;firstTime&quot;:false,&quot;firstUncollapse&quot;:true,&quot;isLastRow&quot;:true,&quot;melelRoshSeifStr&quot;:&quot;03-00520&quot;,&quot;status&quot;:&quot;×&#x91;&quot;,&quot;collapsibleIcon&quot;:false,&quot;action&quot;:2}],&quot;clausesToHandle&quot;:[]}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/clauses/get-by-code-peula-from-elt0300</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/clauses</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="17. Summary" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.01 /api/financial-summary/initialize-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="insuredId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">insuredId</stringProp>
                  <stringProp name="Argument.value">6833602</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="actionCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">actionCode</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchCode</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTchila" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTchila</stringProp>
                  <stringProp name="Argument.value">20200701</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="trTom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">trTom</stringProp>
                  <stringProp name="Argument.value">20210630</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/financial-summary/initialize-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="17.02 /api/credit-card/get-credit-card-fee" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="premiumBruto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumBruto</stringProp>
                  <stringProp name="Argument.value">4415</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="premiumNeto" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">premiumNeto</stringProp>
                  <stringProp name="Argument.value">3045</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="paymentsNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">paymentsNumber</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="maslulAshrai" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">maslulAshrai</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/credit-card/get-credit-card-fee</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="18. Finish policy" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.01 /api/financial-summary/execute-finish-procedures" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;lakoach&quot;:{&quot;ashraiChova&quot;:0,&quot;ashraiPhoneVerify&quot;:0,&quot;ashraiPhoneVerifyChova&quot;:0,&quot;heskemBriut&quot;:{&quot;kisuim&quot;:[{&quot;kisui&quot;:null},{&quot;kisui&quot;:null},{&quot;kisui&quot;:null}],&quot;mKolektiv&quot;:0,&quot;premiaHodshit&quot;:0,&quot;trPremia&quot;:0,&quot;trTchilatHeskem&quot;:0,&quot;trTomHeskem&quot;:0},&quot;idKartisOwner&quot;:0,&quot;idKartisOwnerChova&quot;:0,&quot;idRequestShvaAshrai&quot;:0,&quot;idRequestShvaAshraiChova&quot;:0,&quot;maslolAshrai&quot;:&quot;&quot;,&quot;maslolAshraiChova&quot;:&quot;&quot;,&quot;misparIskatAshrai&quot;:0,&quot;misparIskatAshraiChova&quot;:0,&quot;misparKartisAshrai&quot;:&quot;&quot;,&quot;misparKartisAshraiChova&quot;:&quot;&quot;,&quot;misparTashlumimAshrai&quot;:0,&quot;misparTashlumimAshraiChova&quot;:0,&quot;payerIdType&quot;:1,&quot;payerIdTypeChova&quot;:1,&quot;schumMeusharAshrai&quot;:0,&quot;schumMeusharAshraiChova&quot;:0,&quot;shemKartisOwner&quot;:&quot;&quot;,&quot;shemKartisOwnerChova&quot;:&quot;&quot;,&quot;sugKartisAshrai&quot;:0,&quot;sugKartisAshraiChova&quot;:0,&quot;taarichPagTokefAshrai&quot;:0,&quot;taarichPagTokefAshraiChova&quot;:0,&quot;bank&quot;:0,&quot;cellTel&quot;:&quot;&quot;,&quot;codeChazara&quot;:1,&quot;codePeula&quot;:4,&quot;errMsg&quot;:&quot;&quot;,&quot;ishuv&quot;:&quot;&quot;,&quot;ktovet&quot;:&quot;&quot;,&quot;mCheshbon&quot;:0,&quot;mHoraatKeva&quot;:&quot;304260&quot;,&quot;mLakoach&quot;:6833602,&quot;mikud&quot;:0,&quot;misparBayit&quot;:&quot;       &quot;,&quot;msLakuahSochen&quot;:0,&quot;semelIshuv&quot;:0,&quot;sex&quot;:0,&quot;shemCheshbon&quot;:&quot;&quot;,&quot;shemLakoach&quot;:&quot;&quot;,&quot;shemMishpacha&quot;:&quot;&quot;,&quot;shemAnglit&quot;:&quot;&quot;,&quot;shnotLimud&quot;:0,&quot;snif&quot;:0,&quot;soog&quot;:0,&quot;tel&quot;:&quot;&quot;,&quot;trLeida&quot;:0,&quot;trRishui&quot;:0},&quot;eltr0400&quot;:{&quot;damim&quot;:[{&quot;achuz&quot;:35,&quot;schum&quot;:1066},{&quot;achuz&quot;:0,&quot;schum&quot;:0},{&quot;achuz&quot;:10,&quot;schum&quot;:304},{&quot;achuz&quot;:0,&quot;schum&quot;:0},{&quot;achuz&quot;:1.5,&quot;schum&quot;:0},{&quot;achuz&quot;:2.43,&quot;schum&quot;:103},{&quot;achuz&quot;:0,&quot;schum&quot;:0}],&quot;mtashlumim&quot;:10,&quot;kodMutarLeshanotBulim&quot;:0,&quot;prNeto&quot;:3045,&quot;codeDamimMuchtavim&quot;:0,&quot;schumHanacha&quot;:0,&quot;achuzHanacha&quot;:0,&quot;mteudatChova&quot;:0,&quot;schumTeudatChova&quot;:0,&quot;codeTeudatChova&quot;:3,&quot;kodShulamChovaZmani&quot;:0,&quot;kodPeula&quot;:1}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/financial-summary/execute-finish-procedures</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.02 /api/sub-branches-policy/call-eltr0600" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eltr0600&quot;:{&quot;xl&quot;:[{},{},{}],&quot;fakul&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;anafLemenus&quot;:[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],&quot;choze&quot;:[{},{},{},{},{}],&quot;kodPeula&quot;:1}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/sub-branches-policy/call-eltr0600</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.03 /api/policy-messages/get-policy-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNo</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/policy-messages/get-policy-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.04 /api/finish/initialize-aggregation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ofenGvia" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ofenGvia</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isMandatoryCredit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isMandatoryCredit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isPaymentMandtoryHeskem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isPaymentMandtoryHeskem</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="isPolicyRawStatus" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">isPolicyRawStatus</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="policyNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">policyNumber</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="branchNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">branchNo</stringProp>
                  <stringProp name="Argument.value">22</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finish/initialize-aggregation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="18.05 /api/finish/update-status-chitum" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="statusChitumCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">statusChitumCode</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finish/update-status-chitum</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="19. Accept" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19.01 /api/user-messages/delete-new-user-messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/user-messages/delete-new-user-messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19.02 /api/finish/execute-finish-procedures?" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;sendPol&quot;:{&quot;ishurChidush&quot;:1,&quot;targetPrintoutCode&quot;:0,&quot;codeHakpaa&quot;:0,&quot;codeHadpasa&quot;:2,&quot;hadpasaMelea&quot;:1,&quot;kaskoChova&quot;:0,&quot;mOtakim&quot;:0,&quot;forcePolNumber&quot;:&quot;0000000000000&quot;,&quot;payTeudatChova&quot;:1,&quot;footer&quot;:&quot;CSE.21130827&quot;,&quot;kodChazara&quot;:0,&quot;kodPeula&quot;:1,&quot;mpnia&quot;:0}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/finish/execute-finish-procedures?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19.03 /api/main/save-to-last-policy" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;policyNumber&quot;:&quot;002253552920500&quot;,&quot;name&quot;:&quot;×&#x90;×&#x90;×&#x90; ×&#x92;×&#x92;×&#x92;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host-qa}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/main/save-to-last-policy</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}/financial-summary</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${scheme}://${front-end-qa}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.3; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">** Disable for better results</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Raw - Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\LoadTest\Hafaka\Results\raw.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Raw - Errors" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">D:\LoadTest\Hafaka\Results\errors.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="useGroupName">true</boolProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="RespTimeGraph.interval">500</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
